/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function TremulousModule($D, $A) {
	
	this.disabled = false;
	
	var _name = this.name = this.constructor.name;


	const tremQueryPrefix = '\xFF\xFF\xFF\xFF';
	
	function TremulousServerCommand( server, command, OnResult ) {

		DBG && DebugTraceCall();
		var [host,port] = server.split(':', 2);
		UDPGet( host, port, tremQueryPrefix + command, 3*SECOND, OnResult );
	}
	
	
	function ParseStatus( statusLine ) {

		var status = NewDataObj(), split = statusLine.split('\\');
		split.shift(); // first is empty
		while (split.length)
			status[split.shift()] = split.shift();
		return status;
	}


	function ParsePlayer( playerInfo ) {
		
		var res = /([0-9]+) ([0-9]+) "(.*)"/(playerInfo);
		return res ? (res.shift(), res) : undefined;
	}
	

	function ParseRconStatus( data ) {
		
		var tpl = {num:1, score:2, ping:3, name:4, lastmsg:5, ip:6, port:7, qport:8, rate:9};
		try {
		
			var lines = data.split('\n');
			CHK( lines.shift() == tremQueryPrefix + 'print' );
			var [,map] = CHK(/^map: (.*)$/(lines.shift()));
			lines.shift(); // col names
			lines.shift(); // --- -----
			for ( var status = []; lines.length && lines[0]; lines.shift() )
				status.push(MakeObj( tpl, CHK(  /^ *([0-9]+) *(-?[0-9]+) *([0-9]+) (.*?) *([0-9]+) *([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+):([0-9]+) *([0-9]+) *([0-9]+)$/(lines[0])  ) ));
			return status;
		} catch(ex if ex == ERR) {
			
			return undefined;
		}
	}
	
	
	function TremulousServerStatus( server, OnResult ) {
		
		DebugTraceCall();

		TremulousServerCommand( server, 'getstatus', function(status, buf) {

			DBG && DebugTraceCall('TremulousServerCommand response');
			
			if ( status != OK ) {

				OnResult(status);
				return;
			}

			var lines = buf.split('\n');
			if ( !lines ) {

				OnResult(BADRESPONSE);
				return;
			}

			var serverStatus = NewDataObj();
			try {

				CHK( lines.shift() == tremQueryPrefix+'statusResponse' ); // remove header
				serverStatus.info = CHK(ParseStatus(lines.shift()));
				lines.pop(); // last line is empty
				serverStatus.playerList = [ CHK(ParsePlayer(line))[2] for each ( line in lines ) ];
			} catch(ex if ex == ERR) {

				OnResult(BADRESPONSE);
				return;
			}

			OnResult(OK, serverStatus);
		});
	}


	function TremulousServerRconStatus( server, rcon, OnResult ) {
		
		TremulousServerCommand( server, 'rcon '+rcon+' status', function(status, data) {
			
			if ( status != OK ) {

				OnResult(status);
				return;
			}
			
			var serverStatus = ParseRconStatus(data);
			
			if ( serverStatus == undefined ) {
				
				OnResult(BADRESPONSE);
				return;
			}

			OnResult(OK, serverStatus);
		});
	}


	function TremulousMasterGetServerList( server, OnResult ) {
		
		var [host, port] = server.split(':',2);
		UDPGet( host, port, tremQueryPrefix+ 'getservers 69 full', 10*SECOND, function(status, data) { // getservers 69 empty full
			
			if ( status != OK ) {

				OnResult(status);
				return;
			}
		
			var p = new Pack(new Buffer(data));
			
			var responseHdr = tremQueryPrefix+'getserversResponse\\';
			if ( p.buffer.Read(responseHdr.length) != responseHdr ) {
				
				OnResult(BADRESPONSE);
				return;
			}
			
			var serverList = [];
			while ( p.buffer.length >= 7 ) {

				var ip = p.ReadInt(1, false) + '.' + p.ReadInt(1, false) + '.' + p.ReadInt(1, false) + '.' + p.ReadInt(1, false);
				var port = p.ReadInt(2, false, true);

				if ( !p.buffer.Match('\\') ) {

					OnResult(BADRESPONSE);
					return;
				}
				serverList.push(ip+':'+port);
			}
			OnResult(OK, serverList);
		});
	}
	
	function TremulousTextStrip(str) str.replace(/[\x00-\x19]|\^./g, '');

	function TremulousTextToIrc(str) {
		
		var color = arguments.callee.color || ( arguments.callee.color = { 0:1, 1:4, 2:9, 3:8, 4:12, 5:11, 6:13, 7:0 } );
		var out = '';
		for ( let i = 0; i < str.length; i++ )
			switch (str[i]) {
				case '^':
					out += '\x03' + color[String.charCodeAt(str[++i]) % 8];
					break;
				default:
					out += str[i];
			}
		return out;
	}



	function TremulousServerStatusAnnunceProcedure( channel, tremulousServer, displayInterval ) {
		
		var prevDisplayedStatusDate = 0;
		for (;;) {

			var [status, result] = yield function(callback) TremulousServerStatus( tremulousServer, callback );
			if ( status != OK ) {
			
				yield AsyncSleep( 2*MINUTE );
				continue;
			}

			if ( result.playerList.length < 3 || result.playerList.length > 10 ) {
				
				yield AsyncSleep( 1*MINUTE );
				continue;
			}

			if ( Now() - displayInterval > prevDisplayedStatusDate ) {

				var nicePlayerList = [ '\x030,1'+TremulousTextToIrc(player)+'\x0F' for each ( player in result.playerList ) ];
				$A.Privmsg( channel, TremulousTextToIrc(result.info.sv_hostname) + '\x0F is running ' + result.info.mapname + ' with ' + result.playerList.length + ' player(s)' );
				while ( nicePlayerList.length )
					$A.Privmsg( channel, nicePlayerList.splice(0, 8).join('  ') ); // avoid long lines
				prevDisplayedStatusDate = Now();
			}

			yield AsyncSleep( 1*MINUTE );
		}
	}



// exported api
	
	this.moduleApi = {
	
		TremulousServerCommand: TremulousServerCommand,
		TremulousServerStatus: TremulousServerStatus,
		TremulousServerRconStatus: TremulousServerRconStatus,
		TremulousMasterGetServerList: TremulousMasterGetServerList,
		TremulousTextStrip: TremulousTextStrip,
		TremulousTextToIrc: TremulousTextToIrc,
		
		TremulousServerStatusAnnunceProcedure: TremulousServerStatusAnnunceProcedure
		
	}
	

// procedures

	var _tremulousServerList = NewDataObj();
	var _tremPlayersCount;
	var _tremServerCount;
	var _scanStartTime, _scanEndTime;

	var serverListUpdater = new AsyncProcHelper( function() {
	
		for (;;) {

			// doc. ftp://ftp.idsoftware.com/idstuff/quake3/docs/server.txt
			// doc. http://cvs.icculus.org/cvs/twilight/dpmaster/Attic/techinfo.txt?view=markup
			//   The message must contain a protocol version, and optionally "empty" and/or "full" depending on whether or not the client also wants to get empty or full servers.
			var [status, serverList] = yield function(callback) TremulousMasterGetServerList( 'master.tremulous.net:30710', callback );
			if ( status != OK ) {

				ReportError( 'QueryMasterServer failed: '+status );
				yield AsyncSleep( 1*MINUTE );
				continue;
			}

			ReportNotice( 'QueryMasterServer: '+serverList.length+' servers found');
			
			for each (var server in serverList) {

				var data = _tremulousServerList[server] || (_tremulousServerList[server] = NewDataObj()); // We do not want existing servers to be overwritten
				data.masterDate = Now();
			}

			yield AsyncSleep( 5*MINUTE );
		}
	});
	
	
	var playerScanner = new AsyncProcHelper( function() {

		yield AsyncSleep( 5*SECOND ); // let ServerListUpdater do its job

		for (;;) {
			
			_tremPlayersCount = 0;
			_tremServerCount = 0;
			_scanStartTime = Now();
			
			for ( var server in _tremulousServerList ) {

				var data = _tremulousServerList[server];

				var [status, serverStatus] = yield function(callback) TremulousServerStatus( server, callback );
				if ( status != OK ) {
					
					ReportError( 'PlayerScanner failed: '+status );
					
					delete data.serverStatus; // clear player data from the server
					
					if ( !(data.aliveDate < Now() - 1*HOUR) ) { // remove inactive servers (note that undefined>123 and undefined<123 are false)
						
						ReportError( 'PlayerScanner: removing inactive server '+server );
						delete _tremulousServerList[server];
					}
					continue;
				}
				
				data.aliveDate = Now();
				data.serverStatus = serverStatus;
				_tremPlayersCount += serverStatus.playerList.length;
				_tremServerCount++;
			}

			_scanEndTime = Now();

			ReportNotice( 'PlayerScanner: '+_tremPlayersCount+' players on '+_tremServerCount+' servers were found in '+((_scanEndTime-_scanStartTime)/1000).toFixed(2)+' seconds.' );

			yield AsyncSleep( 3*MINUTE );
		}
	});


	this.moduleListener = {

		botcmd: {
			
			help: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				var nick = StrBefore(from, '!');
				var replyTo = to[0] == '#' ? to : nick;
				$A.Privmsg( replyTo, 'use !qc [<part of a player name>]' );
			},
			
			qc: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				var nick = StrBefore(from, '!');
				var replyTo = to[0] == '#' ? to : nick;

				if ( !cmdData ) {

					let info = 'Currently, there are '+_tremPlayersCount+' tremulous players spread on '+_tremServerCount+' servers.';

					if ( _scanEndTime > _scanStartTime )
						info += ' scan finished '+((Now()-_scanEndTime)/1000).toFixed(2)+' seconds ago';
					else
						info += ' Scan in progress...';
//						info += 'started '+((Now()-_scanStartTime)/1000).toFixed(2);
					
					$A.Privmsg( replyTo, info );
					return;
				}
				
				cmdData = $A.IrcTextStrip(cmdData); // remove any colors and text modifiers
					
				if ( cmdData.length < 2 ) {
					
					$A.Privmsg( replyTo, 'Too short' );
					return;
				}
				
				var playerNameMatchCount = 0;
				var list = [];
				
				for ( var server in _tremulousServerList ) {
					
					if ( !_tremulousServerList[server].serverStatus ) // server has not been scaned yet
						continue;

					var players = [];
					for each ( var player in _tremulousServerList[server].serverStatus.playerList )
						if ( TremulousTextStrip(player).toLowerCase().indexOf(cmdData.toLowerCase()) != -1 ) {
							
							playerNameMatchCount++;
							players.push('\x030,1' + TremulousTextToIrc(player) + '\x0F');
						}
					
					if ( players.length ) {
					
						if ( !_tremulousServerList[server].serverStatus.info || !_tremulousServerList[server].serverStatus.info.sv_hostname ) {
							
							DebugTrace( 'server', server, 'serverStatus', Dump(_tremulousServerList[server]) );
						}
					
						list.push( players.slice(0,5).join(', ') + ' on \x030,1'
						           + TremulousTextToIrc(_tremulousServerList[server].serverStatus.info.sv_hostname)
						           + '\x0F' );
					}
				}

				if ( list.length == 0 ) {
					
					$A.Privmsg( replyTo, 'No match' );
					return;
				}

				$A.Privmsg( replyTo, list.slice(0,4).join(' and ') + ' ('+playerNameMatchCount+' matches)' );
			}
		}
	}

	
	this.stateListener = [
		{
			set: function(s) s.running && s[_name],
			reset: function(s) !s.running || !s[_name],
			trigger: function(polarity) {

				serverListUpdater.Toggle(polarity);
				playerScanner.Toggle(polarity);
			}
		}
	];
	
})
