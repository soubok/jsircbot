/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 3.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 3.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function CTCPModule($D, $A) {

	this.name = this.constructor.name;

	const X_DELIM = '\1';
	const X_QUOTE = '\134'; // back slash

	function lowLevelCtcpQuote(data) { // NUL, NL, CR, QUOTE -> QUOTE 0, QUOTE n, QUOTE r, QUOTE QUOTE
		
		var out='';
		for each ( var c in data )
			switch (c) {
				case NUL:
					out += '\0200';
					break;
				case CR:
					out += '\020r';
					break;
				case LF:
					out += '\020n';
					break;
				case '\020':
					out += '\020\020';
					break;
				default:
					out += c;
			}
		return out;		
	}

	function lowLevelCtcpDequote(data) {

		var out='';
		var len=data.length;
		for ( var i=0; i<len; i++ )
			if ( data[i]=='\020' )
				switch (data[++i]) {
				case '0':
					out += NUL;
					break;
				case 'r':
					out += CR;
					break;
				case 'n':
					out += LF;
					break;
				case '\020':
					out += '\020';
					break;
				}
			else
				out+=data[i];
		return out;		
	}

	function ctcpLevelQuote(data) { // \\, \1 -> \\\\, \\a

		var out='';
		for each ( var c in data )
			switch (c) {
			case X_DELIM:
				out += X_QUOTE + 'a';
				break;
			case X_QUOTE:
				out += X_QUOTE + X_QUOTE;
				break;
			default:
				out += c;
			}
		return out;
	}

	function ctcpLevelDequote(data) {

		var out='';
		var len=data.length;
		for ( var i=0; i<len; i++ )
			if ( data[i] == X_QUOTE )
				switch (data[++i]) {
				case X_QUOTE:
					out += X_QUOTE;
					break;
				case 'a':
					out += X_DELIM;
					break;
				}
			else
				out += data[i];
		return out;		
	}
	

	function DispatchCtcpMessage( from, to, ctcpMessage ) {

		var tag, data, pos = ctcpMessage.indexOf(SPC);
		if ( pos == -1 )
			tag = ctcpMessage;
		else {
			tag = ctcpMessage.substring( 0, pos );
			data = ctcpMessage.substring( pos + 1 );
		}
		$A.FireModuleListener( 'ctcp', tag, from, to, data );
	}


	this.moduleListener = { ircMsg:{
	
		NOTICE: function( tmp, command, from, to, msg ) { // ctcp response
		},

		PRIVMSG: function( tmp, command, from, to, msg ) {
			
			[ DispatchCtcpMessage( from, to, m ) for ( [i, m] in Iterator(msg.split(X_DELIM)) ) if ( i % 2 ) ];
		}
	} }

	this.moduleApi = {
		
		CtcpRequest:function(who, tag, data) $A.Send( 'PRIVMSG ' + who + ' :' + lowLevelCtcpDequote( X_DELIM + ctcpLevelQuote(tag + SPC + data) + X_DELIM ) ),
		CtcpResponse:function(who, tag, data) $A.Send( 'NOTICE ' + who + ' :' + lowLevelCtcpDequote( X_DELIM + ctcpLevelQuote(tag + SPC + data) + X_DELIM ) )
	}
})

/* Internet Relay Chat - Client To Client Protocol (CTCP):
	http://www.invlogic.com/irc/ctcp.html
	http://www.invlogic.com/irc/ctcpprot_04.html
	http://www.irchelp.org/irchelp/rfc/ctcpspec.html
*/