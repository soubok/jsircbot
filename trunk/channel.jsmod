/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */

(function ChannelModule() {
	
	this.name = this.constructor.name;
	var _mod = this;
	
	const _nameParser = /(@?)(\+?)(.*)/;
	
	function NormalizeChannelName(channelName) channelName.toLowerCase(); // (TBD) check if we muse use _api.ToIRCLowerString instead !

	function ParseModes( modes, args, chanData ) {

		var simpleMode = { i:'inviteOnly', t:'topicByOp', p:'private', s:'secret', m:'moderated', n:'noExternalMessages', r:'reop', C:'noCtcp', N:'noExternalNotice', c:'noColor' };
		var argPos = 0;
		var pos = 0;
		var set;
		var c;
		while ( (c = modes.charAt(pos)) != '' ) {

			switch(c) {
				case '+' :
					set = true;
					break;
				case '-' :
					set = false;
					break;
				case 'k' :
					setData( chanData.key, args[argPos++] );
					break;
				case 'o' :
					setData( chanData.names[args[argPos++]].operator, set );
					break;
				case 'v' :
					setData( chanData.names[args[argPos++]].voice, set );
					break;
				case 'l' :
					if ( set )
						setData( chanData.userLimit, args[argPos++] );
					else
						delData( chanData.userLimit );
					break;
				case 'b' :
					if ( set )
						setData( chanData.bans[args[argPos++]], set );
					else
						delData( chanData.bans[args[argPos++]] );
					break;
				case ' ' :
					break;
				default:
					setData( chanData[simpleMode[c]], set );
			}
			pos++;
		}		
	}

	this.messageListener = {
	
		RPL_CREATIONTIME: function( command, from, to, channel, time ) {

			setData( _mod.data.channel[NormalizeChannelName(channel)].creationTime, parseInt(time) );
		},		

		JOIN: function( command, who, channel ) { // :cdd_etf_bot!~cdd_etf_b@nost.net JOIN #soubok

			// from i= / n= : http://freenode.net/faq.shtml#userequals		
			
			// channel name case may be wrong
			
			var nick = StrBefore(who, '!'); // [TBD] try to auto extract this
			if ( nick == getData(_mod.data.nick) ) { // self

				setData( _mod.data.channel[NormalizeChannelName(channel)], true );

				_mod.Send( 'MODE '+channel ); // request modes
				_mod.Send( 'MODE '+channel+' +b' ); // request banlist
			} else {

				setData( _mod.data.channel[NormalizeChannelName(channel)].names[nick], true );
			}
		},
			
		RPL_BANLIST: function( command, from, to, channel, ban, banBy, time ) {

			setData( _mod.data.channel[NormalizeChannelName(channel)].bans[ban], true );
		},

		PART: function( command, who, channel ) {

			var nick = StrBefore(who, '!'); // (TBD) try to auto extract this
			if ( nick == getData(_mod.data.nick) )
				delData( _mod.data.channel[NormalizeChannelName(channel)] );
			else
				delData( _mod.data.channel[NormalizeChannelName(channel)].names[nick] );
		},

		KICK: function( command, from, channel, who, message ) {

			if ( who == getData(_mod.data.nick) )
				delData( _mod.data.channel[NormalizeChannelName(channel)] );
			else
				delData( _mod.data.channel[NormalizeChannelName(channel)].names[nick] );
		},

		QUIT: function( command, who ) {

			var nick = StrBefore(who, '!');
			for each ( var chan in _mod.data.channel )
				if ( nick in chan.names )
					delData( chan.names[nick] );
		},
		
		NICK: function( command, who, newNick ) {

			var nick = StrBefore(who, '!')
//			if ( nick == getData( _mod.data.nick ) ) // do not manage bot nick change here! why ?
//				return;
			for each ( var chan in _mod.data.channel )
				if ( nick in chan.names )
					moveData( chan.names[nick], chan.names[newNick] );
		},

		RPL_NOTOPIC: function( command, channel ) {

			delData( _mod.data.channel[NormalizeChannelName(channel)].topic );
		},

		TOPIC: function( command, from, channel, topic ) {
			
			var who = StrBefore(from, '!')			
			var time = Math.floor( (new Date().getTime())/1000 ); // adjust time because timezone ?
			setData( _mod.data.channel[NormalizeChannelName(channel)].topic, topic );
			setData( _mod.data.channel[NormalizeChannelName(channel)].topicWho, who );
			setData( _mod.data.channel[NormalizeChannelName(channel)].topicWho, time );
		},

		RPL_TOPIC: function( command, from, to, channel, topic ) {

			setData( _mod.data.channel[NormalizeChannelName(channel)].topic, topic );
		},
		
		RPL_TOPICWHOTIME: function( command, from, to, channel, who, time ) {

			setData( _mod.data.channel[NormalizeChannelName(channel)].topicWho, who );
			setData( _mod.data.channel[NormalizeChannelName(channel)].topicWho, time );
		},		

		RPL_CHANNELMODEIS: function( command, from, to, channel, modes /*, ...*/ ) {

			ParseModes( modes, Array.slice(arguments,5), _mod.data.channel[NormalizeChannelName(channel)] );
		},
		
		MODE: function( command, who, what, modes /*, ...*/ ) {
				
			if ( what[0] != '#' ) // can be a user mode OR a mod for another channel
				return;
			ParseModes( modes, Array.slice(arguments,4), _mod.data.channel[NormalizeChannelName(what)] );
		},
		
		RPL_NAMREPLY: function( command, from, to, type, channel, list ) {
		
			var chanData = _mod.data.channel[NormalizeChannelName(channel)];
			
			setData( chanData.name, channel ); // this is the first time that the channel name is used with the right case,then save it
			setData( chanData.secret, type == '@' );
			setData( chanData.priv, type == '*' );
			
			for each ( var name in list.split(' ') ) {
				
				if ( !name ) continue;
				var match = _nameParser(name);
				if ( !match ) continue;
				var [, op, voice, nick] = match;
				setData( chanData.names[nick], true );
				setData( chanData.names[nick].voice, !!voice );
				setData( chanData.names[nick].operator, !!op );
			}
		}
	};
	
	_mod.moduleApi = {
	
		Join: function(channel) _mod.Send( 'JOIN ' + channel ),
		Part: function(channel) _mod.Send( 'PART ' + channel ),
		Invite: function(nick, channel) _mod.Send( 'INVITE ' + nick + ' ' + channel )
	}


	this.stateListener = [
		{
			set: function(s) s.interactive,
			reset: False,
			trigger: function(polarity) {

				var chanList = getData(_mod.data[_mod.name].joinList);
				for each ( var channel in chanList )
				_mod.Send( 'JOIN ' + channel );
			}
		}
	];

})
