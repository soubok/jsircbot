/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function DCCChatModule() { // http://en.wikipedia.org/wiki/Direct_Client-to-Client
	
	this.name = this.constructor.name;
	var _mod = this;
	
	var _count = 0;
	var _maxDccChatConnections = 32; // (TBD) move to configuration

	var _moduleListeners = {
	
		ctcp: {
		
			DCC: function( moduleCmd, tag, from, to, data ) {
				
				var [type,protocol,nip,nport] = data.split(' ');
				if ( type != 'CHAT' )
					return;
				if ( _count >= _maxDccChatConnections ) {
					
					ReportWarning('Too many DCC CHAT connections.');
					return;
				}
				
				var connection = new SocketConnection( IntegerToIp(nip), nport );
				connection.OnData = function( buf ) {
					
					_mod.FireModuleListener( 'dcc', 'chatData', from, buf, connection );
				}
				
				connection.OnConnected = function() {
					
					_count++;
					_mod.FireModuleListener( 'dcc', 'chatStart', from, connection );
				}
					
				connection.OnDisconnected = function() { 
					
					_mod.FireModuleListener( 'dcc', 'chatEnd', from, connection );
					connection.Close();
					_count--
				}
				
				connection.OnFailed = function() ReportError('DCC CHAT Connection failed.');
			}
		}
	};

	this.AddModuleListeners = function() _mod.AddModuleListenerSet( _moduleListeners );
	this.RemoveModuleListeners = function() _mod.RemoveModuleListenerSet( _moduleListeners );
	
	
	this.AddModuleAPI = function() {
		
		_mod.api.OpenDCCChat = function( nick, callback ) {
			
			var port = 1024;
			var ip = getData( _mod.data.userhost ).split('@',2)[1];
			
			var _dccAcceptTimeout;
			
			var server = new SocketServer( port, ip, function(connection) {
				
				io.AddTimeout(_dccAcceptTimeout);
				server.Close(); // we accept only one connection
				callback(connection);
			});
			
			_dccAcceptTimeout = io.AddTimeout( 30000, function() server.Close() );
			
			_mod.api.CtcpRequest( nick, 'DCC', 'CHAT chat ' + IpToIntegerp(ip) + ' ' + port );
		}
	}

	this.RemoveModuleAPI = function() {
		
		delete _mod.api.OpenDCCChat;
	}
	
})
