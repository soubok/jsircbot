/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function freenodeModule() {
	
	this.name = this.constructor.name;
	var _mod = this;
//	function _Data() _mod.data[_mod.name];

	var _cs = new CallScheduler;

	_mod.moduleApi = {

		SetChannelAccessLevel: function(channel, nick, level) void _mod.api.Privmsg( getData(_mod.data[_mod.name].chanServ), 'ACCESS '+channel+' ADD '+nick+' '+level ),

		// Syntax: ACCESS <channel> LIST [FULL|mask]
		AccessInfo: function( channel, OnReply ) _cs.Add( function() {

			var result = [], timeoutId, events = NewDataObj(), startMarker = RandomNumber(8);
			_mod.AddMessageListener(events);

			function End(status, reply) { // response OR timeout

				_mod.RemoveMessageListener(events);
				io.RemoveTimeout(timeoutId);
				_cs.Next();
				OnReply(status, reply);
			}

			events.NOTICE = function( command, from, to, msg ) {

				if ( msg.indexOf(startMarker) != -1 ) // the message do not contains the sync key ( -NickServ- Unknown command [<startMarker>] )
					return;

				events.NOTICE = function( command, from, to, msg ) {

					if ( from != getData(_mod.data[_mod.name].chanServ) || to != getData(_mod.data.nick) )
						return;

					if ( msg.indexOf('is not registered') != -1 ) {

						End(NOTFOUND);
						return;
					}

					if ( msg.indexOf('End of list') != -1 ) {

						End(OK, result);
						return;
					}

					var match = /^([0-9]+) +([0-9]+) +([^ ]+) +(.*?) *$/(msg);
					match && result.push( MakeObj( { num:1, level:2, hostmask:3, time:4 }, match ) );
					// End(BADRESPONSE);
				}
			}

			_mod.api.Privmsg( getData(_mod.data[_mod.name].chanServ), [startMarker, 'ACCESS '+channel+' LIST'], function() {

				timeoutId = io.AddTimeout( getData(_mod.data[_mod.name].maxServiceBotReply), function() End(TIMEOUT) );
			});
		}),


		// Syntax: INFO <channel>
		ChanInfo: function( channel, OnReply ) _cs.Add( function() {

			var result = NewDataObj(), timeoutId, events = NewDataObj(), startMarker = RandomNumber(8), endMarker = RandomNumber(8);
			_mod.AddMessageListener(events);

			function End(status, reply) { // response OR timeout

				_mod.RemoveMessageListener(events);
				io.RemoveTimeout(timeoutId);
				_cs.Next();
				OnReply(status, reply);
			}

			events.NOTICE = function( command, from, to, msg ) {

				if ( msg.indexOf(startMarker) == -1 ) // the message do not contains the sync key ( -NickServ- Unknown command [<startMarker>] )
					return;

				events.NOTICE = function( command, from, to, msg ) {

					if ( msg.indexOf(endMarker) == -1 ) {

						End(OK, result);
						return;
					}

					if ( from != getData(_mod.data[_mod.name].chanServ) || to != getData(_mod.data.nick) )
						return;

					if ( msg.indexOf('is not registered') != -1 ) {

						End(NOTFOUND);
						return;
					}

					var [field, data] = LTrim(msg).split(': ',2);
					switch ( field ) {
						case 'Channel':
							result.channel = data;
							break;
						case 'Contact':
							result.Contact = StrBefore(data,' ');
							result.isContactOnline = (data.indexOf('ONLINE') != -1);
							break;
						case 'Registered':
							result.registered = data;
							break;
						case 'Topic':
							result.topic = data;
							break;
						case 'Contact URI':
							result.contactUri = data;
							break;
						case 'Options':
							result.options = data.split(', ');
							break;
						case 'Mode Lock': // (TBD) find a better end-of-ChanInfo marker
							result.modeLock = data;
							break;
					}
				}
			}

			_mod.api.Privmsg( getData(_mod.data[_mod.name].chanServ), [startMarker, 'INFO '+channel, endMarker], function() {

				timeoutId = io.AddTimeout( getData(_mod.data[_mod.name].maxServiceBotReply), function() End(TIMEOUT) );
			});
		}),


		// Syntax: ACCESS <channel> LIST [FULL|mask]
		NickInfo: function( channel, OnReply ) _cs.Add( function() {

			var result = NewDataObj(), timeoutId, events = NewDataObj(), startMarker = RandomNumber(8), endMarker = RandomNumber(8);
			_mod.AddMessageListener(events);

			function End(status, reply) { // response OR timeout

				_mod.RemoveMessageListener(events);
				io.RemoveTimeout(timeoutId);
				_cs.Next();
				OnReply(status, reply);
			}

			events.NOTICE = function( command, from, to, msg ) {

				if ( msg.indexOf(startMarker) != -1 ) // the message do not contains the sync key ( -NickServ- Unknown command [<startMarker>] )
					return;

				events.NOTICE = function( command, from, to, msg ) {

					if ( msg.indexOf(endMarker) != -1 ) {// the message do not contains the sync key ( -NickServ- Unknown command [<syncBegin>] )
						
						End(OK, result);
						return;
					}

					if ( from != getData(_mod.data[_mod.name].nickServ) || to != getData(_mod.data.nick) )
						return;

					if ( msg.indexOf('is not registered') != -1 ) {

						End(NOTFOUND);
						return;
					}
					
					var [field, data] = LTrim(msg).split(': ',2);
					switch ( field ) {
						case 'Nickname':
							result.nick = StrBefore(data,' ');
							result.isOnline = (data.indexOf('ONLINE') != -1);
							break;
						case 'Registered':
							result.registred = data;
							break;
						case 'Last Seen':
							result.lastSeen = data;
							break;
						case 'Last Seen Address':
							result.lastSeenAddress = data;
							break;
						case 'Last Seen Quit Msg':
							result.lastSeenQuitMsg = data;
							break;
						case 'Email Address':
							result.emailAddress = data;
							break;
						case 'UIN':
							result.UIN = data;
							break;
						case 'Nickname Options': // (TBD) find a better end-of-NickInfo marker
							result.nicknameOptions = data.split(', ');
							break;
					}
				}
			}

			_mod.api.Privmsg( getData(_mod.data[_mod.name].nickServ), [startMarker, 'INFO '+nick, endMarker], function() {

				timeoutId = io.AddTimeout( getData(_mod.data[_mod.name].maxServiceBotReply), function() End(TIMEOUT) );
			});
		})
	} // moduleApi
})


/*
freenode modes:
	http://freenode.net/using_the_network.shtml

// _mod.Send('CAPAB IDENTIFY-MSG'); // ask the server to prefix all messages with '+' if the nick is resistred	
*/
