/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function freenodeModule() {
	
	this.name = this.constructor.name;
	var _mod = this;

	var _requestList = [];
	var _timeoutId;

	function channelInfoParser(msg, request) {
	
		if ( msg.indexOf('is not registered') != -1 ) {
			
			Done(NOTFOUND);
			return;
		}
		var [field, data] = LTrim(msg).split(': ',2);
		switch ( field ) {
			case 'Channel':
				request.reply = NewDataObj();
				request.reply.channel = data;
				break;
			case 'Contact':
				request.reply.Contact = StrBefore(data,' ');
				request.reply.isContactOnline = (data.indexOf('ONLINE') != -1);
				break;
			case 'Registered':
				request.reply.registered = data;
				break;
			case 'Topic':
				request.reply.topic = data;
				break;
			case 'Contact URI':
				request.reply.contactUri = data;
				break;
			case 'Options':
				request.reply.options = data.split(', ');
				break;
			case 'Mode Lock':
				request.reply.modeLock = data;
				Done(OK);
				break;
		}
	}

	function accessInfoParser(msg, request) {
		
		try {
	
			if ( msg.indexOf('is not registered') != -1 ) {
				Done(NOTFOUND);
				return;
			}

			if ( msg.indexOf('End of list') != -1 ) {
			
				Done(OK);
				return;
			}
			if ( msg.indexOf('Access List for') != -1 ) {

				request.reply = [];
				return;
			}
		
			var match = /^([0-9]+) +([0-9]+) +([^ ]+) +(.*?) *$/(msg);
			match && request.reply.push( MakeObj( { num:1, level:2, hostmask:3, time:4 }, match ) );

		} catch(ex if ex == ERR) {
			
			log.WriteLn( 'error', 'accessInfoParser: parsing error');
			Done(BADRESPONSE);
			return;
		}
	}
	
	
	function infoParser(msg, request) {
		
		if ( msg.indexOf('is not registered') != -1 ) {
		
			Done(NOTFOUND);
			return;
		}
		var [field, data] = LTrim(msg).split(': ',2);
		switch ( field ) {
			case 'Nickname':
				request.reply = NewDataObj();
				request.reply.nick = StrBefore(data,' ');
				request.reply.isOnline = (data.indexOf('ONLINE') != -1);
				break;
			case 'Registered':
				request.reply.registred = data;
				break;
			case 'Last Seen':
				request.reply.lastSeen = data;
				break;
			case 'Last Seen Address':
				request.reply.lastSeenAddress = data;
				break;
			case 'Last Seen Quit Msg':
				request.reply.lastSeenQuitMsg = data;
				break;
			case 'Email Address':
				request.reply.emailAddress = data;
				break;
			case 'UIN':
				request.reply.UIN = data;
				break;
			case 'Nickname Options':
				request.reply.nicknameOptions = data.split(', ');
				Done(OK);
				break;
		}
	}

	// WaitSync generates a parser that waits for the sync signal and then set the regular message parser.
	function WaitSync(syncKey, commandParser) {
		
		return function(msg, request) {
		
			if ( msg.indexOf(syncKey) != -1 ) // the message contains the sync key ( -NickServ- Unknown command [<key>] )
				request.parser = commandParser;
		}
	}
	
	function Done(status) {
	
		io.RemoveTimeout(_timeoutId);
		void _requestList[0].callback(status, _requestList[0].reply || undefined);
		_requestList.shift();
		_requestList.length && ProcessRequest();
	}
	
	function ProcessRequest() {

		_mod.api.Privmsg( _requestList[0].service, _requestList[0].message, function() {

			_timeoutId = io.AddTimeout( 10*SECONDS, function() Done(TIMEOUT) );
		});
	}
	
	function StartRequest( service, query, parser, callback) {
	
		var syncKey = RandomString(8);
		_requestList.push({ service:service, message:[syncKey, query], parser:WaitSync(syncKey, parser), callback:callback });
		_requestList.length == 1 && ProcessRequest();
	}
	
	this.messageListener = {

		NOTICE: function( command, from, to, msg ) {
		
			if ( _requestList.length && from == _requestList[0].service && to == getData(_mod.data.nick) )
				_requestList[0].parser(msg, _requestList[0]);
		}
	}
	
// we can sync the NickServ or ChanServ with a bad TEST command. The response will be:  ["NOTICE", "NickServ!NickServ@services.", "TremVipBot", "Unknown command [TEST]"]
	
	this.moduleApi = {

		SetAccessLevel: function(channel, nick, level) void _mod.api.Privmsg( 'ChanServ!ChanServ@services.', 'ACCESS '+channel+' ADD '+nick+' '+level ),

		// Syntax: INFO <nickname>	
		NickInfo: function(nick, callback) StartRequest( 'NickServ!NickServ@services.', 'INFO '+nick, infoParser, callback ),

		// Syntax: INFO <channel>
		ChanInfo: function(channel, callback) StartRequest( 'ChanServ!ChanServ@services.', 'INFO '+channel, channelInfoParser, callback ),
		
		// Syntax: ACCESS <channel> LIST [FULL|mask]
		AccessInfo: function(channel, callback) StartRequest( 'ChanServ!ChanServ@services.', 'ACCESS '+channel+' LIST', accessInfoParser, callback )
	}
})


/*
freenode modes:
	http://freenode.net/using_the_network.shtml


// _mod.Send('CAPAB IDENTIFY-MSG'); // ask the server to prefix all messages with '+' if the nick is resistred	
*/