/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function invitationModule() {

	this.name = this.constructor.name;
	var _mod = this;
	
	var pv = Exec('_privateData.js', false);
	
	const tremQueryPrefix = '\xFF\xFF\xFF\xFF';
	
	
	function ColorTremToIrc(str) {
		
		var color = arguments.callee.color || ( arguments.callee.color = { 0:1, 1:4, 2:9, 3:8, 4:12, 5:11, 6:13, 7:0 } );
		var out = '';
		for ( var i = 0; i < str.length; i++ ) {
			switch (str[i]) {
				case '^':
					out += '\x03' + color[String.charCodeAt(str[++i]) % 8];
					break;
				default:
					out += str[i];
			}
		}
		return out;
	}


	function ParsePlayer( playerInfo ) {
		
		var res = /([0-9]+) ([0-9]+) "(.*)"/(playerInfo);
		return res ? (res.shift(), res) : undefined;
	}
	
	
	function ParseStatus( statusLine ) {

		var status = {}, split = statusLine.split('\\');
		split.shift(); // first is empty
		while (split.length)
			status[split.shift()] = split.shift();
		return status;
	}


	function ParseRconStatus( data ) {
		
		var parser = /^ *([0-9]+) *(-?[0-9]+) *([0-9]+) (.*?) *([0-9]+) *([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+):([0-9]+) *([0-9]+) *([0-9]+)$/;
		var tpl = {num:1, score:2, ping:3, name:4, lastmsg:5, ip:6, port:7, qport:8, rate:9};
		
		try {
		
			var lines = data.split('\n');
			CHK( lines.shift() == tremQueryPrefix + 'print' );
			var [,map] = CHK(/^map: (.*)$/(lines.shift()));
			lines.shift(); // col names
			lines.shift(); // --- -----
			for ( var status = []; lines.length && lines[0]; lines.shift() )
				status.push(MakeObj( tpl, CHK(parser(lines[0])) ));
			return status;
		} catch(ex if ex == ERR) {
			
			return undefined;
		}
	}


	function TremulousServerCommand( server, command, OnResult ) {

		var [host,port] = pv.vipTremServer.split(':');
		UDPGet( host, port, tremQueryPrefix + command, 3000, OnResult );
	}
	

	function QueryVIPDatabase( data, OnResult ) {

		HttpRequest( pv.invitationURL, data, 3000, function(status, statusCode, reasonPhrase, headers, body) {

			if ( status != OK ) {
				
				OnResult(status);
				return;
			}

			if ( statusCode != 200 || !body ) {

				OnResult(NOTFOUND);
				return;
			}

			var responseObject;
			try {
				
				responseObject = eval('('+body+')');
			} catch(ex) {
			
				ReportError( ExToText(ex) );
				OnResult(INVALID_RESPONSE);
				return;
			}
			OnResult(OK, responseObject); // don't include this in the try ... catch
		});
	}
	
	
	function QueryTremServerStatus( server, OnResult ) {

		TremulousServerCommand( server, 'getstatus', function(status, buf) {
			
			if ( status != OK ) {

				OnResult(status);
				return;
			}

			var lines = buf.split('\n');
			if ( !lines ) {

				OnResult(INVALID_RESPONSE);
				return;
			}

			var serverStatus = {};

			try {

				CHK( lines.shift() == tremQueryPrefix+'statusResponse' ); // remove header
				serverStatus.info = CHK(ParseStatus(lines.shift()));
				lines.pop(); // last line is empty
				serverStatus.playerList = [ CHK(ParsePlayer(line))[2] for each ( line in lines ) ];
			} catch(ex if ex == ERR) {

				OnResult(INVALID_RESPONSE);
				return;
			}

			OnResult(OK, serverStatus);
		});
	}
	
	var _ipToSetlevel = [];
	

	var _moduleListeners = {

		botcmd: {
			
			help: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( to != pv.vipChannel )
					return;
				var nick = StrBefore(from, '!');
				var replyTo = to[0] == '#' ? to : nick;
				_mod.api.Privmsg( replyTo, 'Help: !invite [<nick>] || !server' );
			},
			
			
			server: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				StartProcedure( new function() {

					if ( to != pv.vipChannel )
						return;
						
					var nick = StrBefore(from, '!');
					var replyTo = to[0] == '#' ? to : nick;

					if ( _mod.lastServerQueryInterval && IntervalNow() - _mod.lastServerQueryInterval < 10000 ) // anti-flood
						_mod.api.Privmsg( replyTo, 'Please don\'t spam, try again later.' ), StopProcedure();
					var [status, result] = yield function(callback) QueryTremServerStatus(pv.vipTremServer, callback);
					
					if ( status != OK )
						_mod.api.Privmsg( replyTo, 'Sorry, the server does not respond.' ), StopProcedure();

					var nicePlayerList = [ '\x030,1'+ColorTremToIrc(player)+'\x0F' for each ( player in result.playerList ) ];
					_mod.api.Privmsg( replyTo, ColorTremToIrc(result.info.sv_hostname) + '\x0F is running ' + result.info.mapname + ' with ' + result.playerList.length + ' player(s)' );
					while ( nicePlayerList.length )
						_mod.api.Privmsg( replyTo, nicePlayerList.splice(0, 8).join('  ') );
					_mod.lastServerQueryInterval = IntervalNow();
				});
			}, // server


			invite: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				StartProcedure( new function() {

					if ( to != pv.vipChannel )
						StopProcedure();
						
					function InvitationFailed(message) {
					
						var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
						_mod.api.Privmsg( replyTo, message );
						StopProcedure();
					}
				
					var hostNick = StrBefore(from, '!');

					var [status, hostWhois] = yield function(callback) _mod.api.Whois(hostNick, callback);
					if ( status != OK )
						InvitationFailed('Unable to get your IRC status '+hostNick+'.');
					if ( !hostWhois.isIdentified )
						InvitationFailed('You are not identified on IRC.');

					var [status, accessList] = yield function(callback) _mod.api.AccessInfo(pv.vipChannel, callback);
					if ( status != OK )
						InvitationFailed('Unable to get AccessInfo.');

					var hostLevel = [ user.level for each ( user in accessList ) if (user.hostmask.toLowerCase() == hostNick.toLowerCase()) ][0];
					
					if ( hostLevel == undefined )
						InvitationFailed('You are not a VIP.');
					
					var [status, hostDbInfo] = yield function(callback) QueryVIPDatabase({ action:'info', nick:hostNick }, callback);
					if ( status != OK )
						InvitationFailed('Service unavailable. Please retry later.');
					if ( hostDbInfo.error )
						InvitationFailed(hostNick+', you are not in the VIP database.');
					
					if ( !cmdData ) { // just get the VIP info

						var days = ( (new Date() - new Date(parseInt(hostDbInfo.time)*1000)) / 86400000 ).toFixed(1);
						InvitationFailed(hostNick+', you\'ve been a VIP for '+days+' days and you have '+hostDbInfo.invitations_left+' invitation(s) remaining.' );
					} else {

						if ( hostDbInfo.invitations_left <= 0 )
							InvitationFailed('Sorry '+nick+', you have no invitations remaining.');
					
						var guestNick = cmdData;

						var [status, guestWhois] = yield function(callback) _mod.api.Whois(guestNick, callback);
						if ( status != OK )
							InvitationFailed('Unable to get '+guestNick+' IRC status.');
						if ( !guestWhois.isIdentified )
							InvitationFailed(guestNick +' is not identified on IRC.');

						var guestLevel = [ user.level for each ( user in accessList ) if (user.hostmask.toLowerCase() == guestNick.toLowerCase()) ][0];

						if ( guestLevel != undefined && guestLevel >= pv.vipChanLevel )
							InvitationFailed(guestNick+' is already a VIP.');

						var [status, response] = yield function(callback) QueryVIPDatabase({ action:'invite', guest:guest, host:nick }, callback);
						if ( status != OK )
							InvitationFailed('Service unavailable. Please retry later.');
						if ( response.error )
							InvitationFailed(response.error);

						_mod.api.SetAccessLevel( pv.vipChannel, guest, pv.vipChanLevel );
						InvitationFailed(guest+' has been invited. You have '+(hostDbInfo.invitations_left-1)+' invitation(s) remaining.');
						if ( info.isOnline )
							_mod.api.Invite( guest, pv.vipChannel );

						var guestIp = GetHostsByName(guestWhois.host);
						_ipToSetlevel.push(guestIp);
					}
				});
			} // invite
			
		}
	}
	
	
	function ScanVipTremServer() {
		
		arguments.callee.timeoutId = io.AddTimeout( 1000*60*10, ScanVipTremServer );

		TremulousServerCommand( pv.vipTremServer, 'rcon '+pv.vipTremServerRcon+' status', function(status, result) {

			if ( status != OK ) // no response or timeout or failure
				return;
			var info = ParseRconStatus(result);
			if ( !info ) // error while parsing the data
				return;

			for each ( var player in info )
				if ( _ipToSetlevel.indexOf(player.ip) )
					TremulousServerCommand( pv.vipTremServer, 'rcon '+pv.vipTremServerRcon+' !setlevel '+info.num+' '+pv.vipTremServerVipLevel );

			QueryTremServerStatus( pv.vipTremServer, function(status, result) {

				if ( status != OK )
					return;
				if ( result.playerList.length < 3 || result.playerList.length > 10 )
					return;
				var nicePlayerList = [ '\x030,1'+ColorTremToIrc(player)+'\x0F' for each ( player in result.playerList ) ];
				_mod.api.Privmsg( pv.vipChannel, ColorTremToIrc(result.info.sv_hostname) + '\x0F is running ' + result.info.mapname + ' with ' + result.playerList.length + ' player(s)' );
				while ( nicePlayerList.length )
					_mod.api.Privmsg( pv.vipChannel, nicePlayerList.splice(0, 8).join('  ') );
			});

		});
	}


	var _messageListeners = {

		RPL_WELCOME: function( command, from, to, msg ) {

			ScanVipTremServer();
			
			_mod.api.Nick( pv.botNick );
			_mod.api.Privmsg( pv.nickServ, 'IDENTIFY '+pv.password );
			_mod.api.Privmsg( pv.chanServ, 'IDENTIFY '+pv.vipChannel+' '+pv.vipChannelPassword );
			_mod.api.Join( pv.vipChannel );
			// _mod.Send('CAPAB IDENTIFY-MSG'); // ask the server to prefix all messages with '+' if the nick is resistred
		},

		ERR_NICKNAMEINUSE: function( command, from, to, msg ) {

			_mod.api.Privmsg( pv.nickServ, 'GHOST '+pv.botNick+' '+pv.password );
			_mod.api.Nick( pv.botNick );
		}
	};


	this.AddModuleListeners = function() {
		
		_mod.AddMessageListenerSet( _messageListeners );
		_mod.AddModuleListenerSet( _moduleListeners );
	}
	
	this.RemoveModuleListeners = function() {
	
		_mod.RemoveMessageListenerSet( _messageListeners );
		_mod.RemoveModuleListenerSet( _moduleListeners );
	}

})
