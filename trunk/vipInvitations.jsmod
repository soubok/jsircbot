/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function VipInvitationModule() {

	this.name = this.constructor.name;
	var _mod = this;
	
	var pv = Exec('_privateData.js', false);
	
	const tremQueryPrefix = '\xFF\xFF\xFF\xFF';
	
	function ColorTremToIrc(str) {
		
		var color = arguments.callee.color || ( arguments.callee.color = { 0:1, 1:4, 2:9, 3:8, 4:12, 5:11, 6:13, 7:0 } );
		var out = '';
		for ( let i = 0; i < str.length; i++ )
			switch (str[i]) {
				case '^':
					out += '\x03' + color[String.charCodeAt(str[++i]) % 8];
					break;
				default:
					out += str[i];
			}
		return out;
	}


	function ParsePlayer( playerInfo ) {
		
		var res = /([0-9]+) ([0-9]+) "(.*)"/(playerInfo);
		return res ? (res.shift(), res) : undefined;
	}
	
	
	function ParseStatus( statusLine ) {

		var status = NewDataObj(), split = statusLine.split('\\');
		split.shift(); // first is empty
		while (split.length)
			status[split.shift()] = split.shift();
		return status;
	}


	function ParseRconStatus( data ) {
		
		var tpl = {num:1, score:2, ping:3, name:4, lastmsg:5, ip:6, port:7, qport:8, rate:9};
		try {
		
			var lines = data.split('\n');
			CHK( lines.shift() == tremQueryPrefix + 'print' );
			var [,map] = CHK(/^map: (.*)$/(lines.shift()));
			lines.shift(); // col names
			lines.shift(); // --- -----
			for ( var status = []; lines.length && lines[0]; lines.shift() )
				status.push(MakeObj( tpl, CHK(  /^ *([0-9]+) *(-?[0-9]+) *([0-9]+) (.*?) *([0-9]+) *([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+):([0-9]+) *([0-9]+) *([0-9]+)$/(lines[0])  ) ));
			return status;
		} catch(ex if ex == ERR) {
			
			return undefined;
		}
	}


	function QueryVIPDatabase( data, OnResult ) {

		HttpRequest( pv.invitationURL, data, 3*SECOND, function(status, statusCode, reasonPhrase, headers, body) {
			
			DBG && ReportNotice( 'QueryVIPDatabase:: STATUS:'+OK+' REQUEST:'+data.toSource()+' RESPONSE:'+body );

			if ( status != OK ) {
				
				OnResult(status);
				return;
			}

			if ( statusCode != 200 || !body ) {

				OnResult(NOTFOUND);
				return;
			}

			var responseObject;
			try {
				
				responseObject = eval('('+body+')');
			} catch(ex) {
			
				DBG && ReportError( ExToText(ex) );
				OnResult(BADRESPONSE);
				return;
			}
			OnResult(OK, responseObject); // don't include this in the try ... catch
		});
	}


	function TremulousServerCommand( server, command, OnResult ) {
	
		var [host,port] = pv.vipTremServer.split(':', 2);
		UDPGet( host, port, tremQueryPrefix + command, 3*SECOND, OnResult );
	}
	
	
	function QueryTremServerStatus( server, OnResult ) {

		TremulousServerCommand( server, 'getstatus', function(status, buf) {
			
			if ( status != OK ) {

				OnResult(status);
				return;
			}

			var lines = buf.split('\n');
			if ( !lines ) {

				OnResult(BADRESPONSE);
				return;
			}

			var serverStatus = NewDataObj();

			try {

				CHK( lines.shift() == tremQueryPrefix+'statusResponse' ); // remove header
				serverStatus.info = CHK(ParseStatus(lines.shift()));
				lines.pop(); // last line is empty
				serverStatus.playerList = [ CHK(ParsePlayer(line))[2] for each ( line in lines ) ];
			} catch(ex if ex == ERR) {

				OnResult(BADRESPONSE);
				return;
			}

			OnResult(OK, serverStatus);
		});
	}
	
	
	_mod.playerListToSetlevel = [];
	

	this.moduleListener = {

		botcmd: {
			
			help: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( to != pv.vipChannel )
					return;
				var nick = StrBefore(from, '!');
				var replyTo = to[0] == '#' ? to : nick;
				_mod.api.Privmsg( replyTo, 'Help: !invite [<nick>] || !server' );
			},
			
			
			server: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				StartAsyncProc( new function() {

					if ( to != pv.vipChannel )
						return;
						
					var nick = StrBefore(from, '!');
					var replyTo = to[0] == '#' ? to : nick;

					if ( _mod.lastServerQueryInterval && IntervalNow() - _mod.lastServerQueryInterval < 10*SECOND ) // anti-flood
						_mod.api.Privmsg( replyTo, 'Please don\'t spam, try again later.' ), AbortAsyncProc();
					var [status, result] = yield function(callback) QueryTremServerStatus(pv.vipTremServer, callback);
					
					if ( status != OK ) {
					
						_mod.api.Privmsg( replyTo, 'Sorry, the server does not respond.' );
						AbortAsyncProc();
						return;
					}

					var nicePlayerList = [ '\x030,1'+ColorTremToIrc(player)+'\x0F' for each ( player in result.playerList ) ];
					_mod.api.Privmsg( replyTo, ColorTremToIrc(result.info.sv_hostname) + '\x0F is running ' + result.info.mapname + ' with ' + result.playerList.length + ' player(s)' );
					while ( nicePlayerList.length )
						_mod.api.Privmsg( replyTo, nicePlayerList.splice(0, 8).join('  ') );
					_mod.lastServerQueryInterval = IntervalNow();
				});
			}, // server


			forceinvite: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
			
				StartAsyncProc( new function() {

					function CancelForceinvite(message) {
					
						var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
						_mod.api.Privmsg( replyTo, message );
						AbortAsyncProc();
					}

					!_mod.api.IsBotOp(from) && CancelForceinvite('need bot auth.');

					var replyTo = to[0] == '#' ? to : StrBefore(from, '!');

					!cmdData && CancelForceinvite( 'use: !forceinvite <guest> by <host>' );

					var [guestNick, byWord, hostNick] = cmdData.split(' ');
					
					byWord != 'by' && CancelForceinvite( 'use: !forceinvite <guest> by <host>' );
					
					var [status, hostWhois] = yield function(callback) _mod.api.Whois(hostNick, callback);
					status != OK && CancelForceinvite('Unable to get '+hostNick+' IRC status.');
					!hostWhois.isIdentified && CancelForceinvite( hostWhois+' is not identified on IRC.');

					var [status, guestWhois] = yield function(callback) _mod.api.Whois(guestNick, callback);
					status != OK && CancelForceinvite('Unable to get '+guestNick+' IRC status.');
					!guestWhois.isIdentified && CancelForceinvite( guestNick+' is not identified on IRC.');
					
					var [status, response] = yield function(callback) QueryVIPDatabase({ action:'invite', guest:guestNick, host:hostNick }, callback);
					status != OK && CancelForceinvite('Service unavailable. Please retry later.');
					response.error && CancelForceinvite(response.error);

					var guestIp = GetHostsByName(guestWhois.host);
					if ( guestIp ) {

						var [status, response] = yield function(callback) QueryVIPDatabase({ action:'setIp', nick:guestNick, ip:guestIp }, callback);
						_mod.playerListToSetlevel.push([guestIp, guestNick, Now()]);
					}
				});
			},

			invite: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				StartAsyncProc( new function() {

					to != pv.vipChannel && AbortAsyncProc();
						
					function CancelInvitation(message) {
					
						var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
						_mod.api.Privmsg( replyTo, message );
						AbortAsyncProc();
					}
				
					var hostNick = StrBefore(from, '!');

					var [status, hostWhois] = yield function(callback) _mod.api.Whois(hostNick, callback);
					status != OK && CancelInvitation('Unable to get your IRC status '+hostNick+'. ('+status+')');
					!hostWhois.isIdentified && CancelInvitation('You are not identified on IRC.');

					var [status, accessList] = yield function(callback) _mod.api.AccessInfo(pv.vipChannel, callback);
					status != OK && CancelInvitation('Unable to get AccessInfo.');

					var hostLevel = [ user.level for each ( user in accessList ) if (user.hostmask.toLowerCase() == hostNick.toLowerCase()) ][0];
					var hasBeenOpByChanServ = getData( _mod.data.channel[pv.vipChannel].names[hostNick].operator.by ) == pv.chanServ;
					!(hostLevel >= pv.vipChanLevel) && !hasBeenOpByChanServ && CancelInvitation('You must be a VIP to invite someone.');
					hostLevel >= pv.vipChanLevel || hasBeenOpByChanServ && CancelInvitation('Please use your master nick before invite.');

					var [status, hostDbInfo] = yield function(callback) QueryVIPDatabase({ action:'info', nick:hostNick }, callback);
					status != OK && CancelInvitation('Service unavailable. Please retry later.');
					hostDbInfo.error && CancelInvitation(hostNick+', you are not in the VIP database.');
					
					if ( !cmdData ) { // just get the VIP info

						var days = ( (new Date() - new Date(parseInt(hostDbInfo.time)*1000)) / DAY ).toFixed(1);
						CancelInvitation(hostNick+', you\'ve been a VIP for '+days+' days and you have '+hostDbInfo.invitations_left+' invitation(s) remaining.' );
					} else {

						hostDbInfo.invitations_left <= 0 && CancelInvitation('Sorry '+hostNick+', you have no invitations remaining.');
					
						var guestNick = cmdData;

						var [status, guestWhois] = yield function(callback) _mod.api.Whois(guestNick, callback);
						status != OK && CancelInvitation('Unable to get '+guestNick+' IRC status.');
						!guestWhois.isIdentified && CancelInvitation(guestNick +' is not identified on IRC.');

						var guestLevel = [ user.level for each ( user in accessList ) if (user.hostmask.toLowerCase() == guestNick.toLowerCase()) ][0];
						guestLevel >= pv.vipChanLevel && CancelInvitation(guestNick+' is already a VIP.');

						var [status, response] = yield function(callback) QueryVIPDatabase({ action:'invite', guest:guestNick, host:hostNick }, callback);
						status != OK && CancelInvitation('Service unavailable. Please retry later.');
						response.error && CancelInvitation(response.error);

						_mod.api.SetChannelAccessLevel( pv.vipChannel, guestNick, pv.vipChanLevel );
						CancelInvitation(guestNick+' has been invited. You have '+(hostDbInfo.invitations_left-1)+' invitation(s) remaining.');

						_mod.api.Invite( guestNick, pv.vipChannel );

						var guestIp = GetHostsByName(guestWhois.host);
						if ( guestIp ) {

							var [status, response] = yield function(callback) QueryVIPDatabase({ action:'setIp', nick:guestNick, ip:guestIp }, callback);
							_mod.playerListToSetlevel.push([guestIp, guestNick, Now()]); // fc. VipTremServerUpdateIpList and VipTremServerScanPlayers procedures
						}
					}
				});
			} // invite
		}
	}
	

	var VipTremServerScanPlayers = new function() {
		
		var prevDisplayedStatusDate = 0;
		for (;;) {

			var [status, result] = yield function(callback) QueryTremServerStatus( pv.vipTremServer, callback );
			if ( status != OK ) {
			
				yield function(callback) io.AddTimeout( 1*MINUTE, callback ); // async pause
				continue;
			}

			if ( result.playerList.length < 3 || result.playerList.length > 10 ) {
				
				yield function(callback) io.AddTimeout( 1*MINUTE, callback ); // async pause
				continue;
			}

			if ( Now() - 10*MINUTE > prevDisplayedStatusDate ) {

				var nicePlayerList = [ '\x030,1'+ColorTremToIrc(player)+'\x0F' for each ( player in result.playerList ) ];
				_mod.api.Privmsg( pv.vipChannel, ColorTremToIrc(result.info.sv_hostname) + '\x0F is running ' + result.info.mapname + ' with ' + result.playerList.length + ' player(s)' );
				while ( nicePlayerList.length )
					_mod.api.Privmsg( pv.vipChannel, nicePlayerList.splice(0, 8).join('  ') ); // avoid long lines
				prevDisplayedStatusDate = Now();
			}

			yield function(callback) io.AddTimeout( 1*MINUTE, callback ); // async pause
		}
	}

	
	var VipTremServerAutoSetlevel = new function() {
		
		for (;;) {

			var [status, result] = yield function(callback) TremulousServerCommand( pv.vipTremServer, 'rcon '+pv.vipTremServerRcon+' status', callback );

			if ( status == OK ) // no response or timeout or failure
				loop:
				for each ( let playerStatusInfo in ParseRconStatus(result) ) // ParseRconStatus returns undefined on error
					for each ( let [i, [guestIp, guestNick, date]] in Iterator(_mod.playerListToSetlevel) )
						if ( playerStatusInfo.ip == guestIp ) {

							TremulousServerCommand( pv.vipTremServer, 'rcon '+pv.vipTremServerRcon+' !setlevel '+playerStatusInfo.num+' '+pv.vipTremServerVipLevel, Noop );
							TremulousServerCommand( pv.vipTremServer, 'rcon '+pv.vipTremServerRcon+' m '+ playerStatusInfo.num +' Now your level is '+pv.vipTremServerVipLevel+', try !help command.', Noop );
							guestNick && TremulousServerCommand( pv.vipTremServer, 'rcon '+pv.vipTremServerRcon+' say Welcome to '+guestNick+'^7 the new VIP !', Noop );
							_mod.playerListToSetlevel.splice(i, 1); // remove processed item
							QueryVIPDatabase({ action:'setlevelDone', nick:guestNick, tremName:guestNick }, callback);
							break loop; // because the list has been splice(), we can only process one item
						}

			yield function(callback) io.AddTimeout( 1*MINUTE, callback ); // async pause
		}
	}

	var VipTremServerUpdateIpList = new function() {
	
		for (;;) {

			var [status, response] = yield function(callback) QueryVIPDatabase({ action:'getIpList' }, callback);

			if ( status == OK ) {

				_mod.playerListToSetlevel.splice(0); // empty the current list
				if ( !response.error ) // eg. { "error":"No ips in base" }
					for each ( let ip in response )
						_mod.playerListToSetlevel.push([ip, '', 0]); // cf. end of !invite procedure  
				
				// ok, we got the list, then reload it in 2 hours
				yield function(callback) io.AddTimeout( 2*HOUR, callback ); // async pause
			} else {
				
				// failed to get the list, then retry soon
				yield function(callback) io.AddTimeout( 10*MINUTE, callback ); // async pause
			}
		}
	}

	this.stateListener = [
		{
			set: function(s) s.interactive && s.DefaultModule,
			reset: False, // state never resets
			trigger: function(polarity) {

				_mod.api.Nick( pv.botNick );
				_mod.api.Privmsg( pv.nickServ, 'IDENTIFY '+pv.password );
				_mod.api.Privmsg( pv.chanServ, 'IDENTIFY '+pv.vipChannel+' '+pv.vipChannelPassword );
			}
		},
		{
			set: function(s) s.VipInvitationModule && s.interactive && s.ChannelModule,
			reset: function(s) !s.VipInvitationModule && s.interactive && s.ChannelModule,
			trigger: function(polarity) {

				if ( polarity )
					_mod.api.Join( pv.vipChannel );
				else
					_mod.api.Part( pv.vipChannel );
			}
		},
		{
			set: function(s) s.VipInvitationModule && s.interactive && s.DefaultModule,
			reset: function(s) !s.VipInvitationModule || !s.interactive || !s.DefaultModule,
			trigger: function(polarity) {

				ToggleAsyncProc( VipTremServerScanPlayers, polarity );
			}
		},
		{
			set: function(s) s.VipInvitationModule,
			reset: function(s) !s.VipInvitationModule,
			trigger: function(polarity) {

				ToggleAsyncProc( VipTremServerUpdateIpList, polarity );
				ToggleAsyncProc( VipTremServerAutoSetlevel, polarity );
			}
		}
	];
	

	this.messageListener = {

		ERR_NICKNAMEINUSE: function( command, from, to, msg ) {

			_mod.api.Privmsg( pv.nickServ, 'GHOST '+pv.botNick+' '+pv.password );
			_mod.api.Nick( pv.botNick );
		}
	};

})
