/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function OperatorManagerModule() {
	
	this.name = this.constructor.name;
	var _mod = this;
	
	this.InitModule = function() {
	
		setData( _mod.data[_mod.name].list, [] );
	}

	this.moduleListener = {
		
		botcmd: {

			oops: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !_mod.api.IsBotOp(from) )
					return;
				delData( _mod.data[_mod.name].password );
				setData( _mod.data[_mod.name].list, [] );
				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				_mod.api.Privmsg( replyTo, 'Operator functions are locked.' );
			},


			isop: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				_mod.api.Privmsg( replyTo, _mod.api.IsBotOp(from) ? 'yes' : 'no' );
			},


			op: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				if ( !_mod.api.IsBotOp(from) ) {
	
					var password = getData( _mod.data[_mod.name].password );
					if ( password && cmdData == password ) {

						getData( _mod.data[_mod.name].list ).push(from);
						_mod.api.Privmsg( replyTo, 'Done.' );
					}
				} else {

					_mod.api.Privmsg( replyTo, 'Already done.' );
				}
			},


			quit: function( modCmd, cmdName, cmdData, command, from ) {

				if ( !_mod.api.IsBotOp(from) )
					return;
				_mod.api.Quit('bye.');
			},


			restart: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !_mod.api.IsBotOp(from) )
					return;
				_mod.api.Quit('Restarting...');
				SetExitValue(3);
			},


			reload: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !_mod.api.IsBotOp(from) )
					return;
				var nick = StrBefore(from, '!');
				var replyTo = to[0] == '#' ? to : nick;
				
				var moduleNameList = [ m.name for each ( m in core.ModuleList() ) ];
				
				if ( cmdData ) {
				
					var matchName = new RegExp(cmdData, 'i');
					for each ( var moduleName in moduleNameList )
						if ( matchName(moduleName) ) {
						
							_mod.api && _mod.api.Privmsg && _mod.api.Privmsg( replyTo, 'Reloading '+moduleName );
							
							var mod = core.ModuleByName(moduleName);
							core.ReloadModule(mod);
						}
				} else {

					_mod.api.Privmsg && _mod.api.Privmsg( replyTo, 'list: '+moduleNameList.join('  ') );
				}
			},


			log: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				if ( !_mod.api.IsBotOp(from) )
					return;
				var nick = StrBefore(from, '!');
				_mod.api.OpenDCCChat( nick, function(connection) {

					function LogFilter(data) {
						
						if ( data === LOG_CLOSE_FILTER )
							connection.Close();
						else
							connection.Write(data);
					}
					log.AddFilter( LogFilter, 'irc net http error warning failure notice' ); // or cmdData
					connection.OnDisconnected = function() log.RemoveFilter( LogFilter );
				});
			},


			eval: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				if ( !_mod.api.IsBotOp(from) )
					return;

				var nick = StrBefore(from, '!');
				_mod.api.OpenDCCChat( nick, function(connection) {
					
					var code = '';
					connection.OnData = function(buf) {

						code += buf.replace(/\r?\n?$/,''); // remove trailing CR LF
						if ( IsStatementValid(code) ) {
							
							var res;
							try {

								res = eval( code );
							} catch(ex) {

								res = ex;
							}
							connection.Write(res + LF);
							code = '';
						}
					}
				});
			},


			raw: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !_mod.api.IsBotOp(from) )
					return;
				var nick = StrBefore(from, '!');

				function CreateSpy(connection) function() connection.Write( Array.slice(arguments).toSource() + LF );

				_mod.api.OpenDCCChat( nick, function(connection) {

					var spy = CreateSpy(connection);
					_mod.AddMessageListenerSet(spy);
					connection.OnData = function(buf) {
						
						_mod.Send( buf.replace(/\r?\n?$/,'') );
					}
					connection.OnDisconnected = function() _mod.RemoveMessageListenerSet(spy);
				});
			}
			
		}
	}
	
	this.moduleApi = {
	
		IsBotOp:function(from) getData( _mod.data[_mod.name].list ).indexOf(from) != -1
	}
})

