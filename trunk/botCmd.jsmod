/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


function RateMeter(amountLimit, monitorPeriod) {

    var _keyList = {};
    this.Add = function(key, amount) {

    	var now = Now();
    	for ( var k in Iterator(_keyList, true) ) // clean the list
			if ( now - _keyList[k].time > monitorPeriod )
				delete _keyList[k];
        var data = _keyList[key] || (_keyList[key] = { time:0, amount:0 });
   		var interval = now - data.time;
   		data.amount = data.amount * (interval < monitorPeriod ? 1 - interval / monitorPeriod : 0) + amount;
   		data.time = now;
		return data.amount <= amountLimit;
    }
}


(function BotCmdModule($D, $A) {
	
	this.name = this.constructor.name;
	
	var _channelMonitor = new RateMeter(15,15000); // '15:15'.split(':')
	var _commandMonitor = new RateMeter(10,10000);
	var _userMonitor = new RateMeter(5,5000);

	this.messageListener = {
	
		PRIVMSG: function( command, from, to, msg ) {
						
			if ( msg[0] != '!' ) // not a bot command
				return;
				
			//DebugTraceCall('BOT COMMAND');
			ReportNotice( 'BOT COMMAND', from, to, msg );
			
			var cmdName, cmdData;
			var sp = msg.indexOf(' ');
			if ( sp == -1 ) {
			
				cmdName = msg.substr(1);
			} else {
			
				cmdName = msg.substr(1, sp-1);
				cmdData = msg.substr(sp+1);
			}
			
			if ( $A.IsBotOp && !$A.IsBotOp(from) ) { // bot operators can flood

				if ( !_userMonitor.Add(from, 1) ) // user flood protection
					return $A.Notice(StrBefore(from, '!'), 'Antiflood: You are ignored for a while, try again later.');

				if ( !_channelMonitor.Add(to, 1) ) // channel flood protection
					return $A.Notice(StrBefore(from, '!'), 'Antiflood: Channel is ignored for a while, try again later.');

				if ( !_commandMonitor.Add(cmdName, 1) ) // command flood protection
					return $A.Notice(StrBefore(from, '!'), 'Antiflood: Command unavailable for a while.');
			}
			
			$A.FireModuleListener( 'botcmd', cmdName.toLowerCase(), cmdData, command, from, to, msg );
		}
	}
})
