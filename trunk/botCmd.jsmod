/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 3.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 3.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function BotCmdModule($D, $A) {
	
	this.name = this.constructor.name;
	var $MD = $D[this.name];

	var _commandMonitor = new RateMeter();
	var _channelMonitor = new RateMeter();
	var _userMonitor = new RateMeter();

	this.moduleListener = { ircMsg: {
	
		PRIVMSG: function( tmp, command, from, to, msg ) {
						
			if ( msg[0] != '!' ) // not a bot command
				return;
				
			// from = $A.NormalizeNickName(from); but need to extract the nick with StrBefore(from, '!');
			if ( to[0] == '#' )
				to = $A.NormalizeChannelName(to); // normalization is needed because IRC channels names are case insensitive
				
			ReportNotice( 'BOT COMMAND', from, to, msg );
			
			var cmdName, cmdData;
			var sp = msg.indexOf(' ');
			if ( sp == -1 ) {
			
				cmdName = msg.substr(1);
			} else {
			
				cmdName = msg.substr(1, sp-1);
				cmdData = msg.substr(sp+1);
			}
			

			if ( !$A.IsBotOp || !$A.IsBotOp(from) ) { // bot operators can do everything everywhere

				var nick = StrBefore(from, '!');
				var config = getData($MD.config)[cmdName];
				if ( config ) {
				
					if ( !config[0] && to[0] != '#' ) // this command cannot be sent using private message to the bot
						return;

					if ( config[1] && !config[1](to) ) // is this destination (channel or the bot itself) allowed ?
						return;

					if ( config[2] && !config[2](from) ) // is this source (name) allowed ?
						return;

					if ( config[3] && to[0] == '#' ) {

						let path = $D.channel[to].names[nick];
						if ( (getData(path.voice)?1:0) + (getData(path.operator)?2:0) < config[3] ) {
						
							$A.Notice(nick, config[3] == 2 ? 'You are not operator.' : 'You are not voiced.');
							return;
						}
					}

					if ( config[4] && _commandMonitor.Inc(cmdName, 1, config[4][1]) > config[4][0] ) { // command flood protection

						$A.Notice(nick, 'Antiflood: Command unavailable for a while.');
						return;
					}
				}			

				var channelFlood = getData($MD.channelFlood);
				if ( _channelMonitor.Inc(to, 1, channelFlood[1]) > channelFlood[0] ) { // channel flood protection
					
					$A.Notice(nick, 'Antiflood: Channel is ignored for a while, try again later.');
					return;
				}

				var userFlood = getData($MD.userFlood);
				if ( _userMonitor.Inc(from, 1, userFlood[1]) > userFlood[0] ) { // user flood protection
					
					$A.Notice(nick, 'Antiflood: You are ignored for a while, try again later.');
					return;
				}
			}
			
			$A.FireModuleListener( 'botcmd', cmdName.toLowerCase(), cmdData, command, from, to, msg );
		}
	} };
})
