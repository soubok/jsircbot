/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function Gather() {

	this.name = this.constructor.name;
	var _mod = this;
	
	const _channelList = ['#CY', '#trem-vips'];

	_mod.moduleApi = {
	
		GatherRegisterChannel: function(channelName) {

			_channelList.push(channelName);
			_mod.api.Join(channel);
		}
	}

	this.stateListener = [
		{
			set: function(s) s.interactive && s.DefaultModule && s.ChannelModule,
			reset: False, // state never resets
			trigger: function(polarity) {

				for each ( var channel in _channelList )
					_mod.api.Join( channel );
			}
		}
	];
	
	
	function Path(channelName) _mod.data[_mod.name][_mod.api.NormalizeChannelName(channelName)];
	
	function SendGatherStatus(channel) {
		
		if ( !hasData(Path(channel)) ) {
		
			_mod.api.Privmsg(channel, 'No gather in progress. To create a gather, type: !gather <number players by team> [<map name>]' );
			return;
		}
		var gatherData = getData(Path(channel));
		var currentCount = ObjPropertyCount(gatherData.nickList);
		_mod.api.Privmsg(channel, 'Gather' + (gatherData.mapName ? ' on '+gatherData.mapName:'')+' with '+[player for (player in gatherData.nickList)].join(', ') + ' ... ' + (2*gatherData.count-ObjPropertyCount(gatherData.nickList))+' slots left.' );
	}
	
	function StopGather(channel) {

		var gatherData = getData(Path(channel));
		var players = [player for (player in gatherData.nickList)].sort(function() Math.random() - 0.5);
		_mod.api.Privmsg(channel, 'Alien team: '+players.slice(0, gatherData.count).join(', '));
		_mod.api.Privmsg(channel, 'Human team: '+players.slice(gatherData.count).join(', '));
		io.RemoveTimeout(gatherData.timeout);
		delData(Path(channel));
	}
	
	this.moduleListener = {

		botcmd: {
		
			gathernow: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
			
				if ( _channelList.indexOf(to) == -1 )
					return;
					
				var nick = StrBefore(from, '!');
				if ( !_mod.api.IsOp(to, nick) ) {
				
					_mod.api.Privmsg(to, 'Sorry, you are not a channel operator.' );
					return;
				}

				if ( hasData(Path(to)) )
					StopGather(to);
			
			},
		
			gather: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				if ( _channelList.indexOf(to) == -1 )
					return;

				var nick = StrBefore(from, '!');
				if ( !_mod.api.IsOp(to, nick) ) {
				
					_mod.api.Privmsg(to, 'Sorry, you are not a channel operator.' );
					return;
				}

				if ( !cmdData ) {
					
					SendGatherStatus(to);
					return;
				}
				
				var [count, mapName] = cmdData.split(SPC);
				var count = parseInt(count);

				if ( count == 0 ) {

					if ( !hasData(Path(to)) ) {
					
						SendGatherStatus(to);
						return;
					}

					var gatherData = getData(Path(to));

					io.RemoveTimeout( gatherData.timeout );
					delData(Path(to));
					_mod.api.Privmsg(to, 'Gather canceled.' );
					return;
				}

				if ( count > 0 ) { // note: NaN > 0 == false and NaN < 0 == false

					if ( hasData(Path(to)) ) {

						_mod.api.Privmsg(to, 'Gather in progress. type !gather 0 to cancel the gather, or !gather to list current players.' );
						return;
					}

					var gatherData = setData(Path(to), {} );

					gatherData.count = count;
					gatherData.mapName = mapName;
					gatherData.nickList = NewDataObj();
					gatherData.timeout = io.AddTimeout( 3*MINUTE, function() SendGatherStatus(to) );

					SendGatherStatus(to);
				}
			},


			del: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
			
				if ( _channelList.indexOf(to) == -1 )
					return;

				if ( !hasData(Path(to)) ) {
					
					SendGatherStatus(to);
					return;
				}

				var nick = StrBefore(from, '!');
				delete getData(Path(to)).nickList[nick];
				SendGatherStatus(to);
			},
			
			
			add: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
			
				if ( _channelList.indexOf(to) == -1 )
					return;

				if ( !hasData(Path(to)) ) {
					
					SendGatherStatus(to);
					return;
				}

				var nick = StrBefore(from, '!');
				var gatherData = getData(Path(to));

				if ( gatherData.nickList[nick] ) {
					
					_mod.api.Privmsg(to, 'You are already in the gather.' );
					return;
				}

				gatherData.nickList[nick] = Now();
				var currentCount = ObjPropertyCount(gatherData.nickList);

				if ( currentCount >= gatherData.count * 2 ) {
					
					StopGather(to);
				} else {
				
					SendGatherStatus(to);
				}
			}

		}
	}

})
