/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 3.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 3.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function Gather($D, $A) {
	
	this.disabled = false;

	this.name = this.constructor.name;
	var $MD = $D[this.name];

	function GatherPath(channelName) $MD[$A.NormalizeChannelName(channelName)];


	function GatherManager() {

		var players = {};

		this.Count = function( teamNameList ) {
			
			var count = 0;
			if ( teamNameList ) {
			
				for each ( teamName in players )
					if ( teamNameList.indexOf(teamName) != -1 )
						count++;
			} else {
			
				for ( nick in players )
					count++;
			}
			return count;
		}

		this.AddPlayer = function( nick, teamName ) {

			players[nick] = teamName;
		}

		this.GetPlayer = function( nick ) {

			return players[nick];
		}
		
		this.TeamNameList = function() {
			
			var map = {};
			for each ( var teamName in players )
				map[teamName] = true;
			return [ teamName for (teamName in map) ];
		}

		this.GetTeam = function( teamName ) {

			if ( teamName )
				return [ nick for (nick in players) if (players[nick] == teamName) ];
			else
				return [ nick for (nick in players) ];
		}

		this.RemovePlayers = function( nickList ) {

			for each ( var nick in nickList )
				delete players[nick];
		}

		this.RemoveTeams = function( teamNameList ) {

			var removedNickList = [];
			for each ( var teamName in teamNameList ) {

				var nickList = this.GetTeam(teamName);
				this.RemovePlayers(nickList);
				removedNickList = removedNickList.concat(nickList);
			}
			return removedNickList;
		}

		this.SetPlayerTeam = function( nick, teamName ) {

			players[nick] = teamName;
		}

		this.SpreadPlayers = function( nickList, teamNameList ) {

			nickList = nickList.sort(function() Math.random() > 0.5 ? 1 : -1);
			while ( nickList.length )
				players[nickList.pop()] = teamNameList[nickList.length % teamNameList.length]
		}

		this.TogglePlayer = function( nick, teamNameList ) {

			for ( var i in teamNameList )
				if ( players[nick] == teamNameList[i] )
					break;
			players[nick] = teamNameList[++i % teamNameList.length];
		}
	}

	
	function SendGatherStatus(channel) {
		
		if ( !hasData(GatherPath(channel)) ) {
		
			$A.Privmsg(channel, 'No gather in progress. To create a gather, type: !gather <max players count> [<map name>]' );
			return;
		}
		var gather = getData(GatherPath(channel));
		$A.Privmsg(channel, 'Gather' + (gather.mapName ? ' on '+gather.mapName:'')+' with '+gather.GetTeam().join(', ') + ' ... ' + (gather.maxPlayers - gather.Count())+' slots left.' );
	}
	
	function StopGather(channel) {

		var gather = getData(GatherPath(channel));
		
		gather.SpreadPlayers( gather.RemoveTeams(['spectator']), ['alien', 'human']);
		$A.Privmsg(channel, 'Alien team: ' + gather.GetTeam('alien').join(', '));
		$A.Privmsg(channel, 'Human team: ' + gather.GetTeam('human').join(', '));
		io.RemoveTimeout(gather.timeout);
		delData(GatherPath(channel));
	}
	
	this.moduleListener = {

		botcmd: {

			gathernow: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
			
				if ( hasData(GatherPath(to)) )
					StopGather(to);
				else
					$A.Privmsg( to, 'No gather in progress.' );
			},
		
			gather: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				if ( !cmdData ) {
					
					SendGatherStatus(to);
					return;
				}
				
				var [count, mapName] = cmdData.split(SPC);
				if ( count == 0 ) {

					if ( !hasData(GatherPath(to)) ) {
					
						SendGatherStatus(to);
						return;
					}

					var gather = getData(GatherPath(to));
					io.RemoveTimeout( gather.timeout );
					delData(GatherPath(to));
					$A.Privmsg( to, 'Gather canceled.' );
					return;
				}

				if ( count > 0 ) {

					if ( hasData(GatherPath(to)) ) {

						$A.Privmsg( to, 'Gather in progress. type !gather 0 to cancel the gather, or !gather to list current players.' );
						return;
					}
					
					var gather = setData(GatherPath(to), new GatherManager() );
					gather.maxPlayers = parseInt(count);
					gather.mapName = mapName;
					gather.timeout = io.AddTimeout( 3*MINUTE, function() SendGatherStatus(to) );
					SendGatherStatus(to);
				}
			},

			del: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
			
				if ( !hasData(GatherPath(to)) ) {
					
					SendGatherStatus(to);
					return;
				}

				var gather = getData(GatherPath(to));
				var nick = StrBefore(from, '!');
				gather.RemovePlayers([nick]);
				SendGatherStatus(to);
			},
			
			
			add: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
			
				if ( !hasData(GatherPath(to)) ) {
					
					SendGatherStatus(to);
					return;
				}

				var gather = getData(GatherPath(to));
				var nick = StrBefore(from, '!');
				if ( gather.GetPlayer(nick) ) {
					
					$A.Privmsg(to, 'You are already in the gather.' );
					return;
				}

				gather.AddPlayer(nick, 'spectator');
				var currentCount = gather.Count();

				if ( currentCount >= gather.maxPlayers )
					StopGather(to);
				else
					SendGatherStatus(to);
			}

		}
	}
})
