/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */

function Ascii(data) data.replace(/[\x00-\x1F,\x7F-\xFF]/g, '?');

(function MiscellaneousModule($D, $A) {
	
	this.name = this.constructor.name;
	var _mod = this;
	
	function TranslateText( sourceLanguage, destinationLanguage, text, callback ) {
		
		text = EscapeEntities(text);

		HttpRequest( 'http://translate.google.com/translate_t?langpair='+sourceLanguage+'|'+destinationLanguage, { text:text }, 1000, function(status, statusCode, reasonPhrase, headers, data ) {

			if ( status != OK || statusCode != 200 ) {

				callback( status );
			} else {

				var match = /result_box.*?>(.*?)<\//(data);
				if ( match )
					callback( OK, UnescapeEntities(match[1]) );
				else
					callback( BADRESPONSE );
			}
		});
	}
	
	
	function TranslateSMSText( text, callback ) { // french only
// http://www.aidoforum.com/traducteur-sms.php
// alt. http://www.moktoipas.com/traducteur.php?q=J%27m+po+l%E9+sms+%286%29
// alt. http://www.alaide.com/dico_traducteur_sms.php
//				var tmp = data.substring(data.lastIndexOf('<p>_start_')+10, data.lastIndexOf('_end_</p>'));
//				var tr = StripHTML(tmp);

		HttpRequest( 'http://www.alaide.com/dico_traducteur_sms.php', { q:'_s_ '+text+' _e_', action:'translate' }, 5000, function(status, statusCode, reasonPhrase, headers, data ) {

			if ( status != OK || statusCode != 200 ) {

				callback( status );
			} else {
				
				var match = /translated(?:.|\n)+_s_((?:.|\n)*)_e_/g(data);
				
				if ( !match || !match[1]) {

					callback( BADRESPONSE );
					return;
				}

				callback( OK, StripHTML(match[1]) );
			}
		});	
	}

	this.moduleListener = {

		botcmd: {
			
			sms: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				TranslateSMSText( cmdData, function(status, translatedText ) {

					if ( status != OK )
						return;
					var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
					$A.Privmsg( replyTo, translatedText );
				});
			},
			
			tre: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				TranslateText( 'fr', 'en', cmdData, function(status, translatedText ) {

					if ( status != OK )
						return;
					var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
					$A.Privmsg( replyTo, translatedText );
				});
			},

			trf: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
			
				TranslateText( 'en', 'fr', cmdData, function(status, translatedText ) {

					if ( status != OK )
						return;
					var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
					$A.Privmsg( replyTo, translatedText );
				});
			},

			hl: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				var nameList = [''];
				for ( name in $D.channel[to].names ) {
					
					if ( !hasData($D.channel[to].names[name]) ) // has been renamed
						continue;
					switch ( cmdData ) {
						case '':
							return;
						case '@':
							if ( $A.IsOp(to,name) )
								continue;
							break;
						case '*':
							break;
						default:
							if ( name.toLowerCase().indexOf(cmdData.toLowerCase()) == -1 )
								continue;
							break;
					}
					if ( (nameList[0] + name).length > 480 ) //gatData( $D.maxMessageTextLength )
						nameList.unshift(['']);
					nameList[0] += name + ' ';
				}
				$A.Privmsg( to, nameList );
			},


			bf: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
			
				var args = ParseArguments(cmdData);

				var code = args[0];
				var inp = args[1];

				var codeSize = code.length;
				var out = '', i = 0, ip = 0, cp = 0, dp = 0, m = {};

				var loopIn = {}, loopOut = {}, tmp = [];
				for ( var cp = 0; cp < codeSize ; cp++ )
					 if ( code[cp] == '[' )
						tmp.push(cp);
					 else if ( code[cp] == ']' )
						loopOut[loopIn[cp] = tmp.pop()] = cp;

				for (var cp = 0; cp < codeSize && i < 10000; cp++, i++) {

					 switch(code[cp]) {

						  case '>': dp++; break;
						  case '<': dp--; break;
						  case '+': m[dp] = ((m[dp]||0)+1)&255; break
						  case '-': m[dp] = ((m[dp]||0)-1)&255; break;
						  case '.': out += String.fromCharCode(m[dp]); break;
						  case ',': m[dp] = inp.charCodeAt(ip++)||0; break;
						  case '[': m[dp]||(cp=loopOut[cp]); break;
						  case ']': cp = loopIn[cp]-1; break;
					 }
				}

				$A.Privmsg( to, Ascii(out.substr(0,300)) );
			}

		}
	}
})
