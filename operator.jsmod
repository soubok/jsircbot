/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function OperatorManagerModule($D, $A, $S) {
	
	var _name = this.name = this.constructor.name;
	var $MD = $D[_name];
	

	var flooder = new AsyncProcHelper( function( replyTo, period, amount, times, instant ) {
		
		for ( var i = 0; !times || i < times; i++ ) {

			$A.Send( 'PRIVMSG '+replyTo+' :'+RandomString(amount || 16), instant );
			
			yield AsyncSleep( period || 1500 );
		}
	});


	this.moduleListener = {
		
		botcmd: {

			oops: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				delData( $MD.password );
				setData( $MD.list, [] );
				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				$A.Privmsg( replyTo, 'Operator functions locked.' );
			},


			deop: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				if ( !$A.IsBotOp(from) ) {

					$A.Privmsg( replyTo, 'Already done.' );
					return;
				}

				DeleteArrayElement( getData( $MD.list ), from );
				$A.Privmsg( replyTo, 'Done.' );
			},


			op: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				if ( !$A.IsBotOp(from) ) {
	
					var password = getData( $MD.password );
					if ( password && cmdData == password ) {

						getData( $MD.list ).push(from);
						$A.Privmsg( replyTo, 'Done.' );
					}
				} else {

					$A.Privmsg( replyTo, 'Already op.' );
				}
			},


			quit: function( modCmd, cmdName, cmdData, command, from ) {

				if ( !$A.IsBotOp(from) )
					return;
				$A.Quit( cmdData||'bye.' );
			},


			restart: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				$A.Quit('Restarting...');
				SetExitValue(3);
			},


			flood: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				
				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				if ( cmdData ) {
					
					var [ period, amount, times, instant ] = cmdData.split(' ');
					flooder.running && flooder.Stop();
					!flooder.running && flooder.Start( replyTo, parseInt(period), parseInt(amount), parseInt(times), !!instant );
				} else {
				
					!flooder.running && $A.Privmsg( replyTo, 'use !flood [period [amount [times]]]' );
					flooder.running && flooder.Stop();
				}
			},


			load: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				if ( !$A.IsBotOp(from) )
					return;
				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');

				if ( cmdData ) {
					
					$A.core.LoadModule(cmdData);
				}
			},


			unload: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
			
				if ( !$A.IsBotOp(from) )
					return;
				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				var moduleNameList = [ m.name for each ( m in $A.core.ModuleList() ) ];

				if ( cmdData ) {
				
					var matchName = new RegExp(cmdData, 'i');
					for each ( var moduleName in moduleNameList )
						if ( matchName(moduleName) ) {
						
							$A && $A.Privmsg && $A.Privmsg( replyTo, 'Unloading '+moduleName );
							for each ( mod in $A.core.ModulesByName(moduleName) )
								$A.core.RemoveModule(mod);
						}
				} else {

					$A.Privmsg && $A.Privmsg( replyTo, 'list: '+moduleNameList.join('  ') );
				}
			},


			reload: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				var nick = StrBefore(from, '!');
				var replyTo = to[0] == '#' ? to : nick;
				
				var moduleNameList = [ m.name for each ( m in $A.core.ModuleList() ) ];
				
				if ( cmdData ) {
				
					var matchName = new RegExp(cmdData, 'i');
					for each ( var moduleName in moduleNameList )
						if ( matchName(moduleName) ) {
						
							$A && $A.Privmsg && $A.Privmsg( replyTo, 'Reloading '+moduleName );
							for each ( mod in $A.core.ModulesByName(moduleName) )
								$A.core.ReloadModule(mod);
						}
				} else {

					$A.Privmsg && $A.Privmsg( replyTo, 'list: '+moduleNameList.join('  ') );
				}
			},


			say: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
			
				var [destination, message] = ParseArguments(cmdData);
				$A.Privmsg( destination, message );
			},


			echo: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;

				var nick = StrBefore(from, '!');
				var replyTo = to[0] == '#' ? to : nick;
				
				$A.Privmsg( replyTo, cmdData );
			},


			ping: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
			
				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				$A.Privmsg( replyTo, 'PONG' );
			},


			ip: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;

				var nick = StrBefore(from, '!');
				var replyTo = to[0] == '#' ? to : nick;


				$A.Whois(cmdData, function(status, user) {
					
					if ( status != OK )
						return;
					
					var userIp = GetHostByName(user.host);
					$A.Privmsg( replyTo, userIp );				
				});
			},


			log: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				if ( !$A.IsBotOp(from) )
					return;
				var nick = StrBefore(from, '!');
				$A.OpenDCCChat( nick, function(connection) {

					function LogFilter(data) {
						
						if ( data === LOG_CLOSE_FILTER )
							connection.Close();
						else
							connection.Write(data + LF);
					}
					log.AddFilter( LogFilter, LOG_ALL ); // or cmdData
					connection.OnDisconnected = function() log.RemoveFilter( LogFilter );
				});
			},


			eval: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				if ( !$A.IsBotOp(from) )
					return;

				var nick = StrBefore(from, '!');
				var replyTo = to[0] == '#' ? to : nick;

				var res, context = { $D:$D, $A:$A };

				if ( cmdData ) {

					try {

						res = String(eval( cmdData, context )).split('\n');
					} catch(ex) {

						res = ex;
					}
					$A.Privmsg( replyTo, res );

				} else {
				
					$A.OpenDCCChat( nick, function(connection) {

						var code = '';
						connection.OnData = function() {
							
							var buf = connection.Read();
							code += buf.replace(/\r?\n?$/,''); // remove trailing CR LF
							if ( IsStatementValid(code) ) {

								try {

									res = eval( code, context );
								} catch(ex) {

									res = ex;
								}
								connection.Write(res + LF);
								code = '';
							}
						}
					});
				}
			},


			raw: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				var nick = StrBefore(from, '!');

				if ( cmdData ) {

					$A.Send( cmdData );
				} else {

					function CreateSpy(connection) function() connection.Write( Array.slice(arguments).toSource() + LF ); // (TBD) remove the 1st argument

					$A.OpenDCCChat( nick, function(connection) {

						var spy = { ircMsg:CreateSpy(connection) };
						$A.AddModuleListener(spy);
						connection.OnData = function() {
							
							var buf = connection.Read();
							$A.Send( buf.replace(/\r?\n?$/,'') );
						}
						connection.OnDisconnected = function() {

							$A.RemoveModuleListener(spy);
							connection.Close();
						}
					});
				}
			},


			dump: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				var nick = StrBefore(from, '!');
				
				$A.OpenDCCChat( nick, function(connection) {
					
					connection.Write( dumpData($D) + LF );
					connection.Close();
				});
			},


			inspect: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				var nick = StrBefore(from, '!');
				
				$A.OpenDCCChat( nick, function(connection) {	
					
					connection.Write( [ fct() for each ( fct in INSPECT ) ].join(LF) + LF );
					connection.Close();
				});
			}
			
		} // botcmd
	} // moduleListener
	
	
	this.stateListener = [
		{
			set: function(s) s[_name],
			reset: function(s) !s[_name],
			trigger: function(polarity) {
				
				if ( polarity )
					setData( $MD.list, [] );
				else
					delData( $MD.list );
			}
		}
	];
	
	
	this.moduleApi = {
	
		IsBotOp:function(from) getData( $MD.list ).indexOf(from) != -1
	}
})

