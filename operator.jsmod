/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function OperatorManagerModule($D, $A) {
	
	var _name = this.name = this.constructor.name;
	var modData = $D[_name];
	
	
	var _floodPreiod = 5000;
	var _floodDataSize = 10;
	
	this.moduleListener = {
		
		botcmd: {

			oops: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				delData( modData.password );
				setData( modData.list, [] );
				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				$A.Privmsg( replyTo, 'Operator functions are locked.' );
			},


			isop: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				$A.Privmsg( replyTo, $A.IsBotOp(from) ? 'yes' : 'no' );
			},


			op: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				if ( !$A.IsBotOp(from) ) {
	
					var password = getData( modData.password );
					if ( password && cmdData == password ) {

						getData( modData.list ).push(from);
						$A.Privmsg( replyTo, 'Done.' );
					}
				} else {

					$A.Privmsg( replyTo, 'Already done.' );
				}
			},


			quit: function( modCmd, cmdName, cmdData, command, from ) {

				if ( !$A.IsBotOp(from) )
					return;
				$A.Quit('bye.');
			},


			restart: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				$A.Quit('Restarting...');
				SetExitValue(3);
			},


			flooddata: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;

				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				$A.Privmsg( replyTo, 'changing flood length from '+_floodDataSize+'bytes to '+cmdData+'bytes.' );
				_floodDataSize = parseInt(cmdData);
			},

			floodperiod: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;

				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				$A.Privmsg( replyTo, 'changing flood period from '+_floodPreiod+'ms to '+cmdData+'ms.' );

				_floodPreiod = parseInt(cmdData);
			},

			flood: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				
				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
//				$A.Privmsg( replyTo, 'Starting flood: '+_floodPreiod );
				StartAsyncProc( new function() {
					
					for (;;) {

						if ( !_floodPreiod )
							return;
						$A.Send( 'PRIVMSG #soubok :'+RandomString(_floodDataSize || 10), true );
						yield AsyncSleep( parseInt(_floodPreiod) || 2000);
					}
				
				});
			},



// flood stat result:

// 64 char / 2 second = oo times / slowdown after oo messages

// 64 char / 1.5 second = 73 times / slowdown after 20 messages


// 1 char / 1 second = 84 times / slowdown after ?? messages
// 2 char / 1 second = 80 times / slowdown after 10 messages
// 8 char / 1 second = 64 times / slowdown after 10 messages
// 64 char / 1 second =  27 times / slowdown after 10 messages
// 256 char / 1 second =  5 times / slowdown after 4 messages

// 8 char / 0.5 second = 25 times / slowdown after 7 messages
// 64 char / 0.5 second = 13 times / slowdown after 7 messages


// 8 char / 0.01 second = 5 times
// 64 char / 0.01 second = 5 times
// 256 char / 0.01 second =  3 times


			reload: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				var nick = StrBefore(from, '!');
				var replyTo = to[0] == '#' ? to : nick;
				
				var moduleNameList = [ m.name for each ( m in core.ModuleList() ) ];
				
				if ( cmdData ) {
				
					var matchName = new RegExp(cmdData, 'i');
					for each ( var moduleName in moduleNameList )
						if ( matchName(moduleName) ) {
						
							$A && $A.Privmsg && $A.Privmsg( replyTo, 'Reloading '+moduleName );
							
							for each ( mod in core.ModulesByName(moduleName) )
								core.ReloadModule(mod);
						}
				} else {

					$A.Privmsg && $A.Privmsg( replyTo, 'list: '+moduleNameList.join('  ') );
				}
			},

			echo: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;

				var nick = StrBefore(from, '!');
				var replyTo = to[0] == '#' ? to : nick;
				
				$A.Privmsg( replyTo, cmdData );
			},

			ip: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;

				var nick = StrBefore(from, '!');
				var replyTo = to[0] == '#' ? to : nick;


				$A.Whois(cmdData, function(status, user) {
					
					if ( status != OK )
						return;
					
					var userIp = GetHostByName(user.host);
					$A.Privmsg( replyTo, userIp );				
				});
			},


			log: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				if ( !$A.IsBotOp(from) )
					return;
				var nick = StrBefore(from, '!');
				$A.OpenDCCChat( nick, function(connection) {

					function LogFilter(data) {
						
						if ( data === LOG_CLOSE_FILTER )
							connection.Close();
						else
							connection.Write(data + LF);
					}
					log.AddFilter( LogFilter, LOG_ALL ); // or cmdData
					connection.OnDisconnected = function() log.RemoveFilter( LogFilter );
				});
			},


			eval: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				if ( !$A.IsBotOp(from) )
					return;

				var nick = StrBefore(from, '!');
				$A.OpenDCCChat( nick, function(connection) {
					
					var code = '';
					connection.OnData = function(buf) {

						code += buf.replace(/\r?\n?$/,''); // remove trailing CR LF
						if ( IsStatementValid(code) ) {
							
							var res;
							try {

								res = eval( code );
							} catch(ex) {

								res = ex;
							}
							connection.Write(res + LF);
							code = '';
						}
					}
				});
			},


			raw: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				var nick = StrBefore(from, '!');

				function CreateSpy(connection) function() connection.Write( Array.slice(arguments).toSource() + LF );

				$A.OpenDCCChat( nick, function(connection) {

					var spy = CreateSpy(connection);
					$A.AddMessageListener(spy);
					connection.OnData = function(buf) {
						
						$A.Send( buf.replace(/\r?\n?$/,'') );
					}
					connection.OnDisconnected = function() $A.RemoveMessageListener(spy);
				});
			},
			
			dump: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				var nick = StrBefore(from, '!');
				
				$A.OpenDCCChat( nick, function(connection) {
					
					connection.Write( dumpData($D) + LF );
					connection.Close();
				});
			},
			
			say: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
			
				var [destination, message] = ParseArguments(cmdData);
				$A.Privmsg( destination, message );
			},

			ping: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
			
				var replyTo = to[0] == '#' ? to : StrBefore(from, '!');
				$A.Privmsg( replyTo, 'PONG' );
			},
			
			inspect: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !$A.IsBotOp(from) )
					return;
				var nick = StrBefore(from, '!');
				
				$A.OpenDCCChat( nick, function(connection) {	
					
					connection.Write( [ fct() for each ( fct in INSPECT ) ].join(LF) + LF );
					connection.Close();
				});
			}
/*			
			,
			
			api: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				var args = cmdData.split(SPC);
				var fct = args.shift();
				
				$A.
			}
*/			
			
			
		} // botcmd
	} // moduleListener
	
	
	this.stateListener = [
		{
			set: function(s) s[_name],
			reset: function(s) !s[_name],
			trigger: function(polarity) {
				
				if ( polarity )
					setData( modData.list, [] );
				else
					delData( modData.list );
			}
		}
	];
	
	
	this.moduleApi = {
	
		IsBotOp:function(from) getData( modData.list ).indexOf(from) != -1
	}
})

