/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function testModule() {
	
	this.name = this.constructor.name;
	var _mod = this;
	
	var _moduleListeners = {
		
		ctcp: {
		
			PING: function( modCmd, tag, from, to, data ) {

				var nick = from.substring( 0, from.indexOf('!') );
				_mod.api.CtcpResponse( nick, tag, data );
			}
		},	
		
		botcmd: {

			dump: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !_mod.api.IsBotOp(from) )
					return;

				var nick = StrBefore(from, '!');
				
				_mod.api.OpenDCCChat( nick, function(connection) {
					
					connection.Write( dumpData(_mod.data) + '\n' );
					connection.Close();
				});
			},

			quit: function( modCmd, cmdName, cmdData, command, from ) {

				if ( !_mod.api.IsBotOp(from) )
					return;

				_mod.api.Quit('bye...');
			},
			
			reload: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !_mod.api.IsBotOp(from) )
					return;

				var nick = from.split('!',1)[0];
				var replyTo = to[0] == '#' ? to : nick;
				
				if ( cmdData ) {
				
					var matchName = new RegExp(cmdData, 'i');
					for each ( var moduleName in core.ModuleList() )
						if ( matchName(moduleName) ) {
						
							_mod.api && _mod.api.Privmsg && _mod.api.Privmsg( replyTo, 'Reloading '+moduleName );
							core.ReloadModuleByName(moduleName);
						}
				} else {

					_mod.api.Privmsg && _mod.api.Privmsg( replyTo, 'list: '+core.ModuleList().join('  ') );
				}
			},

			eval: function( modCmd, cmdName, cmdData, command, from, to, msg ) {
				
				if ( !_mod.api.IsBotOp(from) )
					return;

				var nick = StrBefore(from, '!');
				_mod.api.OpenDCCChat( nick, function(connection) {
					
					var code = '';
					
					connection.OnData = function(buf) {

						if ( buf.substr(-1) == LF )
							buf = buf.substr(0, buf.length-1);
						if ( buf.substr(-1) == CR )
							buf = buf.substr(0, buf.length-1);
						
						code += buf;
						if ( IsStatementValid(code) ) {
							
							var res;
							try {

								res = eval( buf );
							} catch(ex) {

								res = ex;
							}
							connection.Write(res + LF);
							code = '';
						}
					}
				});
			},
			
			raw: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !_mod.api.IsBotOp(from) )
					return;

				var nick = StrBefore(from, '!');

				function CreateSpy(connection) function() {

					connection.Write( Array.slice(arguments).toSource() + LF );
				}
				
				_mod.api.OpenDCCChat( nick, function(connection) {

					var spy = CreateSpy(connection);
					_mod.AddMessageListenerSet(spy);
					connection.OnData = function(buf) {
						
						if ( buf.substr(-1) == LF )
							buf = buf.substr(0, buf.length-1);
						if ( buf.substr(-1) == CR )
							buf = buf.substr(0, buf.length-1);
						_mod.Send(buf);
					}

					connection.OnDisconnected = function() _mod.RemoveMessageListenerSet(spy);
				});
			},

			echo: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !_mod.api.IsBotOp(from) )
					return;

				var nick = from.split('!',1)[0];
				var replyTo = to[0] == '#' ? to : nick;
				
				_mod.api.Privmsg( replyTo, cmdData );
			},

			userhost: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				if ( !_mod.api.IsBotOp(from) )
					return;

				var nick = from.split('!',1)[0];
				var replyTo = to[0] == '#' ? to : nick;

/* getUserIp
				var nick = StrBefore(from, '!');
				_mod.api.OpenDCCChat( nick, function(connection) {
						
					var ip = connection.peerName;
					connection.Close();
					_mod.api.Privmsg( nick, 'your IP is: ' + ip );
				});
*/

				_mod.api.UserHost( cmdData.split(' '), function(result) {
				
					_mod.api.Privmsg( replyTo, 'userhost : ' + result.toSource() );
				});

				
/*
				_mod.api.Prompt( 'soubok', 'hello', function() {
				
					DArgs();
				});
*/

/* DCC chat				
*/


/*
				var url = 'http://jsircbot.googlecode.com/svn/trunk/dccReceiver.jsmod';
				HttpRequest( url, '', 1000, function(status, statusCode, reasonPhrase, headers, body) {
					DPrint(body.length);
				});
				
				
				DPrint( Array.slice(arguments).toSource() )

				var nick = from.split('!',1)[0];
				var replyTo = to[0] == '#' ? to : nick;
*/

	//			for ( var i = 0; i<100; i++ ) _mod.api.Privmsg( nick, 'XxxxxxxxXxxxxxxxXxxxxxxxXxxxx '+i );
	//			_mod.api.Privmsg( replyTo, new Date() );
	//			_mod.api.Privmsg( to, Array.slice(arguments).toSource() );
			}
		}
	}

	this.AddModuleListeners = function() _mod.AddModuleListenerSet( _moduleListeners );
	this.RemoveModuleListeners = function() _mod.RemoveModuleListenerSet( _moduleListeners );

/*
		addDataListener( _module.data.channel['#jslibs'].names['soubok'], function(info) {
			_module.Send( 'PRIVMSG soubok :hi! ('+info+')' );
//			_module.Send( 'PRIVMSG soubok :'+_module.api.Ctcp('VERSION') );
		});
*/

})


/*

DCCchat:
  CHAT <space> <protocol> <space> <ip> <space> <port>
  
*/