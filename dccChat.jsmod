/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function DCCChatModule($D, $A) { // http://en.wikipedia.org/wiki/Direct_Client-to-Client
	
	this.name = this.constructor.name;
	var $MD = $D[this.name];
	
	var _DCCConnectionsCount = 0;
	
	this.moduleListener = {
	
		ctcp: {
		
			DCC: function( moduleCmd, tag, from, to, data ) {
				
				var [type,protocol,nip,nport] = data.split(' ');
				if ( type != 'CHAT' )
					return;
				if ( _DCCConnectionsCount >= getData( $D.DCC.maxDCCConnections ) ) {
					
					DBG && ReportError('Too many DCC CHAT connections.');
					return;
				}
				
				var connection = new TCPConnection( IntegerToIp(nip), nport );
				
				connection.OnData = function() {
					
					$A.FireModuleListener( 'dcc', 'chatData', from, connection.Read(), connection );
				}
				
				connection.OnConnected = function() {
					
					_DCCConnectionsCount++;
					$A.FireModuleListener( 'dcc', 'chatStart', from, connection );
				}
					
				connection.OnDisconnected = function() { 
					
					$A.FireModuleListener( 'dcc', 'chatEnd', from, connection );
					connection.Close();
					_DCCConnectionsCount--;
				}
				
				connection.OnFailed = function() DBG && ReportError('DCC CHAT Connection failed.');
				connection.Connect();
			}
		}
	};
	
	
	var _pendingConnections = [];
	
	this.moduleApi = {
	
		OpenDCCChat: function( nick, callback ) {

			var _dccAcceptTimeout, ip = getData( $D.sockName );
			var server = new TCPServer( getData( $D.DCC.portRange ), ip ); // (TBD) close the connection on module shutdown
			_pendingConnections.push(server);
			server.OnIncoming = function(connection) {

				io.RemoveTimeout(_dccAcceptTimeout);
				server.Close(); // we accept only one connection
				RemoveArrayElement(_pendingConnections, server);
				callback(connection);
			}
			_dccAcceptTimeout = io.AddTimeout( getData( $D.DCC.requestTimeout ) , function() server.Close() );
			$A.CtcpRequest( nick, 'DCC', 'CHAT chat '+IpToInteger(ip)+' '+server.port );
		}	
	};

	this.stateListener = [
		{
			set: function(s) s[STATE_RUNNING] && s[_name],
			reset: function(s) !s[STATE_RUNNING] || !s[_name],
			trigger: function(polarity) {
				
				if (polarity) {
					
				} else {
					
//					for each ( var server in _pendingConnections )
//						_pendingConnections
					//CloseConnections(); // (TBD) close pending connections & timeouts
				}
			}
		}
	];	

})
