/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function DCCChatModule() { // http://en.wikipedia.org/wiki/Direct_Client-to-Client
	
	this.name = this.constructor.name;
	var _mod = this;
	
	var _count = 0;
	var _maxDccChatConnections = 2;

	var _moduleListeners = {
	
		ctcp: {
		
			DCC: function( moduleCmd, tag, from, to, data ) {
				
				var [type,protocol,nip,nport] = data.split(' ');
				if ( type != 'CHAT' )
					return;
				if ( _count >= _maxDccChatConnections ) {
					
					ReportWarning('Too many DCC CHAT connections.');
					return;
				}
				var chat = new SocketConnection();
				function OnData( buf ) _mod.FireModuleListener( 'dcc', 'chat', from, buf );
				function OnConnected() _count++;
				function OnDisconnected() { chat.Close(); _count-- }
				function OnFailed() ReportError('DCC CHAT Connection failed.');
				chat.Connect( IntegerToIp(nip), nport, OnConnected, OnData, OnDisconnected, OnFailed );
			}
		}
	};

	this.AddModuleListeners = function() _mod.AddModuleListenerSet( _moduleListeners );
	this.RemoveModuleListeners = function() _mod.RemoveModuleListenerSet( _moduleListeners );
})
