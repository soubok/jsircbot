(function tremulousServerStatus() {
	
	function GetServerList( callback ) {
	
		var ms = new Socket( Socket.UDP );
		ms.nonblocking = true;
		ms.Connect( 'master.tremulous.net', 30710 );
		
		var timeout;
		
		ms.writable = function() {

			delete ms.writable;
			ms.Write('\xFF\xFF\xFF\xFFgetservers 69');
		}
		
		ms.readable = function() {
			
			delete ms.readable;
			var buffer = new Buffer(ms.Read(8192));
			ms.Close();
			
			io.RemoveTimeout(timeout);
			
			io.RemoveDescriptor(ms);
			var responseHdr = '\xFF\xFF\xFF\xFFgetserversResponse\\';
			if ( buffer.Read(responseHdr.length) != responseHdr )
				throw 'Invalid server response';
		
			var serverList = [];
		
			var p = new Pack(buffer);
			while ( buffer.length >= 7 ) {

				var ip = p.ReadInt(1, false) + '.' + p.ReadInt(1, false) + '.' + p.ReadInt(1, false) + '.' + p.ReadInt(1, false);
				var port = p.ReadInt(2, false, true);
				if ( !buffer.Match('\\') )
					throw 'Protocol error';
				serverList.push([ip,port]);
			}
			
			callback(serverList);
		}

		io.AddDescriptor(ms);
		timeout = io.AddTimeout( 5000, function() {
			ms.Close();
			io.AddDescriptor(ms);
			callback();
		});
	}	
	
	
	var _mod = this;
	
	var _botCmd = {

		state:function( cmdName, cmdData, command, from, to, msg ) {

			var nick = from.split('!',1);
			var replyTo = to[0] == '#' ? to : nick;

			GetServerList( function( serverList ) {
				
				if ( serverList )
					_mod.api.privmsg( replyTo, 'got '+serverList.length+' tremulous servers' );
				else
					_mod.api.privmsg( replyTo, 'failed' );
			})
		}

	}

	this.AddModuleListeners = function() _mod.api.botCmd.AddSet( _botCmd );
	this.RemoveModuleListeners = function() _mod.api.botCmd.RemoveSet( _botCmd );
})
