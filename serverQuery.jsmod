/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function tremulousServerStatus($D, $A) {
	
	this.name = this.constructor.name;
	this.disabled = true;
	
	this.moduleListener = {
	
		botcmd: {

			state: function( modCmd, cmdName, cmdData, command, from, to, msg ) {

				var nick = from.split('!',1);
				var replyTo = to[0] == '#' ? to : nick;

				UDPGet( 'master.tremulous.net', 30710, '\xFF\xFF\xFF\xFFgetservers 69', 5*SECOND, function(status, response) {

					if ( status != OK ) {
						$A.Privmsg( replyTo, 'failed' );
					} else {

						var serverList = [];
						var buffer = new Buffer(response);
						buffer.Match('\xFF\xFF\xFF\xFFgetserversResponse\\') || Failed('Invalid server response');
						var p = new Pack(buffer);
						while ( buffer.length >= 7 ) {

							var ip = p.ReadInt(1, false) + '.' + p.ReadInt(1, false) + '.' + p.ReadInt(1, false) + '.' + p.ReadInt(1, false);
							var port = p.ReadInt(2, false, true);
							buffer.Match('\\') || Failed('Protocol error');
							serverList.push([ip,port]);
						}

						$A.Privmsg( replyTo, 'got '+serverList.length+' tremulous servers' );
					}
				});
			}
		}
	}

})
