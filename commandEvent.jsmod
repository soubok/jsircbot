/* ***** BEGIN LICENSE BLOCK *****
 * Version: GNU GPL 2.0
 *
 * The contents of this file are subject to the
 * GNU General Public License Version 2.0; you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 * http://www.gnu.org/licenses/gpl.html
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 * ***** END LICENSE BLOCK ***** */


(function CommandEventModule() {
	
	this.name = this.constructor.name;
	var _mod = this;
	
	var _cs = new CallScheduler;
	
	_mod.moduleApi = {
	
		Whois: function( nick, OnReply ) _cs.Add(function() {

			var pingData = RandomString(16);
			var timeoutId, events = NewDataObj(), result = NewDataObj();

			_mod.AddMessageListener(events);

			function End(status, reply) {

				_mod.RemoveMessageListener(events);
				io.RemoveTimeout(timeoutId);
				_cs.Next();
				OnReply(status, reply);
			}

			events.PONG = function(command, from, server, data) {

				if ( data != pingData )
					return;
				delete events.PONG;

				events.RPL_WHOISUSER = function( command, from, to, nick, user, host, star, realName ) {

					result.nick = nick
					result.user = user
					result.host = host;
					result.realName = realName;
				}
				events.RPL_WHOISCHANNELS = function( command, from, to, nick, channelList ) {

					result.channelList = RTrim(channelList).split(' ');
				}
				events.RPL_WHOISSERVER = function( command, from, to, nick, server, serverInfo ) {
					result.server = server;
					result.serverInfo = serverInfo;
				}
				events[320] = function( command, from, to, nick ) { // is identified to services (freenode only ?)

					result.isIdentified = true;
				}
				events.ERR_NOSUCHSERVER = function() End(NOTFOUND);
				events.ERR_NONICKNAMEGIVEN = function() End(BADREQUEST);
				events.ERR_NOSUCHNICK = function() End(NOTFOUND);
				events.RPL_ENDOFWHOIS = function( command, from, to, nick ) {

					End(OK, result);
				}
			}

			_mod.Send( ['PING '+pingData, 'WHOIS '+nick], false, function() { // PING to sync the request

				timeoutId = io.AddTimeout(getData(_mod.data[_mod.name].maxServerReplyInterval), function() End(TIMEOUT) );
			});
		}),


		UserHost: function( nickList, OnReply ) _cs.Add(function() {

			var pingData = RandomString(16);
			var timeoutId;
			var events = NewDataObj();

			function End(status, reply) {

				_mod.RemoveMessageListener(events);
				io.RemoveTimeout(timeoutId);
				_cs.Next();
				OnReply(status, reply);
			}

			events.PONG = function(command, from, server, data) {

				if ( data != pingData )
					return;
				delete events.PONG;
				events.RPL_USERHOST = function( command, from, to, hostList ) {

					var result = NewDataObj();
					for each ( var userhost in hostList.split(' ') ) {

						var match = /(.+?)(\*?)=(\+?)(?:.*?)@(.*)/(userhost);
						if ( userhost && match ) {

							var [, nick, ircOp, hasAwayMsg, host] = match;
							result[nick] = host;
						}
					}
					End(OK, result);
				};

				events.ERR_NEEDMOREPARAMS = function( command, from, to, erroneousCommand, reasonPhrase ) erroneousCommand == 'USERHOST' && End(BADREQUEST);
			};

			_mod.AddMessageListener(status, events);

			_mod.Send( ['PING '+pingData, 'USERHOST '+nickList.join(' ')], false, function() {

				timeoutId = io.AddTimeout(getData(_mod.data[_mod.name].maxServerReplyInterval), function() End(TIMEOUT) ); // start the timeout ONLY vhen the message has been sent
			});
		}),
		

		Prompt: function( nick, message, OnReply ) _cs.Add(function() {

			var timeoutId, events = NewDataObj();

			function End(status, message) {

				_mod.RemoveMessageListener(events);
				io.RemoveTimeout(timeoutId);
				_cs.Next();
				OnReply(status, message);
			}

			events.ERR_NORECIPIENT = function() End(BADREQUEST);
			events.ERR_NOTEXTTOSEND = function() End(BADREQUEST);
			events.ERR_CANNOTSENDTOCHAN = function() End(ERROR);
			events.ERR_NOTOPLEVEL = function() End(ERROR);
			events.ERR_WILDTOPLEVEL = function() End(ERROR);
			events.ERR_TOOMANYTARGETS = function() End(ERROR);
			events.ERR_NOSUCHNICK = function() End(NOTFOUND);
			events.RPL_AWAY = function() End(UNAVAILABLE);
			events.PRIVMSG = function( command, from, to, message ) {

				if ( to == getData(_mod.data.nick) && nick == StrBefore(from, '!') )
					End(OK, message);
			};

			_mod.AddMessageListener(events);
			_mod.api.Privmsg( nick, message, function() {

				timeoutId = io.AddTimeout(getData(_mod.data[_mod.name].maxUserReplyInterval), function() End(TIMEOUT) ); // start the timeout ONLY vhen the message has been sent
			});
		}),
		

		Sync: function( OnReply ) _cs.Add(function() {

			var timeoutId, events, pingData = IntervalNow();

			function End(status) {

				_mod.RemoveMessageListener(events);
				io.RemoveTimeout(timeoutId);
				_cs.Next();
				OnReply(status);
			}

			function Reply( command, from, server, data ) data == pingData && End(OK);

			events = { PONG:Reply };

			_mod.AddMessageListener(events);
			_mod.Send( 'PING '+pingData, false, function() {

				timeoutId = io.AddTimeout(getData(_mod.data[_mod.name].maxServerReplyInterval), function() End(TIMEOUT) ); // start the timeout ONLY vhen the message has been sent
			});
		}),



		Response: function( commandName, OnReply ) _cs.Add(function() {

			var timeoutId, events = {};
			function End() {

				_mod.RemoveMessageListener(events);
				io.RemoveTimeout(timeoutId);
				_cs.Next();
				OnReply.apply(null, arguments);
			}
			_mod.AddMessageListener(events);
			events[commandName] = function( command, from, server, data ) End( OK, command, from, server, data );
			timeoutId = io.AddTimeout(getData(_mod.data[_mod.name].maxServerReplyInterval), function() End(TIMEOUT) );
		})
		
		
	};
})


/*
302    RPL_USERHOST
              ":*1<reply> *( " " <reply> )"

         - Reply format used by USERHOST to list replies to
           the query list.  The reply string is composed as
           follows:

           reply = nickname [ "*" ] "=" ( "+" / "-" ) hostname

           The '*' indicates whether the client has registered
           as an Operator.  The '-' or '+' characters represent
           whether the client has set an AWAY message or not
           respectively.

eg:
USERHOST Wiz Michael syrk
:ircd.stealth.net 302 yournick :syrk=+syrk@millennium.stealth.net
*/


//  WHOIS
// doc: http://www.irchelp.org/irchelp/rfc/rfc2812.txt
// WHOIS CY`TV
// :zelazny.freenode.net 311 soubok CY`TV n=tv ns301208.ovh.net * :tv
// :zelazny.freenode.net 319 soubok CY`TV :@#CY @#trem-vips 
// :zelazny.freenode.net 312 soubok CY`TV irc.freenode.net :http://freenode.net/
// :zelazny.freenode.net 320 soubok CY`TV :is identified to services 
// :zelazny.freenode.net 318 soubok CY`TV :End of /WHOIS list.


